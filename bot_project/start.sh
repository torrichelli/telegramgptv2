#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∑–∞–ø—É—Å–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫

set -euo pipefail  # –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1"
}

log_success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] SUCCESS:${NC} $1"
}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$PROJECT_DIR"

log "üöÄ Starting Telegram Bot..."
log "üìÅ Project directory: $PROJECT_DIR"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "üîç Checking dependencies..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    if ! command -v python3 &> /dev/null; then
        log_error "Python 3 is not installed"
        exit 1
    fi
    
    local python_version=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
    log "üêç Python version: $python_version"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –º–∞–∂–æ—Ä–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
    local major_version=$(echo "$python_version" | cut -d. -f1)
    local minor_version=$(echo "$python_version" | cut -d. -f2)
    
    if [[ $major_version -lt 3 ]] || [[ $major_version -eq 3 && $minor_version -lt 8 ]]; then
        log_error "Python 3.8+ is required, found $python_version"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º pip
    if ! command -v pip3 &> /dev/null; then
        log_error "pip3 is not installed"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    log "üì¶ Installing dependencies..."
    
    if [[ ! -f "requirements.txt" ]]; then
        log_error "requirements.txt not found"
        exit 1
    fi
    
    # –í Nix –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    log_warning "Dependency installation skipped (using Nix packages)"
    log_success "Dependencies managed by Nix environment"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_environment() {
    log "üîß Checking environment variables..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    if [[ ! -f ".env" ]]; then
        log_warning ".env file not found"
        if [[ -f ".env.example" ]]; then
            log "üìã Copy .env.example to .env and configure it:"
            log "   cp .env.example .env"
            log "   nano .env"
        fi
        log_error "Please create .env file with required variables"
        exit 1
    fi
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    set -a
    source .env
    set +a
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    local required_vars=("BOT_TOKEN")
    local missing_vars=()
    
    for var in "${required_vars[@]}"; do
        if [[ -z "${!var:-}" ]]; then
            missing_vars+=("$var")
        fi
    done
    
    if [[ ${#missing_vars[@]} -gt 0 ]]; then
        log_error "Missing required environment variables:"
        for var in "${missing_vars[@]}"; do
            log_error "  - $var"
        done
        exit 1
    fi
    
    log_success "Environment variables OK"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_database() {
    log "üíæ Initializing database..."
    
    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    mkdir -p data
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if python3 -c "
import asyncio
import sys
sys.path.append('.')
from db.db import init_database

async def main():
    try:
        await init_database()
        print('Database initialized successfully')
    except Exception as e:
        print(f'Database initialization failed: {e}')
        sys.exit(1)

asyncio.run(main())
"; then
        log_success "Database initialized"
    else
        log_error "Failed to initialize database"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
check_scheduler_config() {
    log "‚è∞ Checking scheduler configuration..."
    
    if [[ -n "${TARGET_CHATS:-}" ]]; then
        log "üì° Target chats configured: $TARGET_CHATS"
    else
        log_warning "TARGET_CHATS not set - scheduler will not send reports automatically"
        log "   Tip: Set TARGET_CHATS with your chat ID for automated daily reports"
    fi
    
    local report_time="${REPORT_TIME:-23:59}"
    log "üïê Report time: $report_time (Moscow timezone)"
    
    local scheduler_enabled="${SCHEDULER_ENABLED:-true}"
    if [[ "$scheduler_enabled" == "true" ]]; then
        log "‚úÖ Scheduler enabled"
    else
        log "‚è∏Ô∏è Scheduler disabled"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ unified Excel —Å–∏—Å—Ç–µ–º—ã
check_unified_excel_system() {
    log "üìä Checking unified Excel reporting system..."
    
    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    mkdir -p reports_output
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    local required_files=(
        "reports/unified_excel_template.py"
        "reports/unified_report_manager.py"
    )
    
    for file in "${required_files[@]}"; do
        if [[ ! -f "$file" ]]; then
            log_error "Required unified Excel file missing: $file"
            exit 1
        fi
    done
    
    log "‚úÖ Unified Excel system files OK"
    log "üìù subscribers_report.xlsx will be created in reports_output/"
    log "üìã Features: –ò—Å—Ç–æ—Ä–∏—è, –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, daily sheets (–î–î-–ú–ú-–ì–ì–ì–ì)"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è unified —Å–∏—Å—Ç–µ–º—ã
test_unified_system() {
    log "üß™ Testing unified Excel reporting system..."
    
    if python3 -c "
import asyncio
import sys
sys.path.append('.')

async def test_unified():
    try:
        from reports.unified_report_manager import UnifiedReportManager
        from db.db import get_db
        
        # Initialize system
        db = get_db()
        unified_manager = UnifiedReportManager(db)
        
        # Test message generation
        message_text, download_keyboard = unified_manager.get_daily_message_with_button()
        
        print('‚úÖ Unified system test passed')
        print('üìä Daily message format: OK')
        print('üîó Download button: OK')
        print('üìÅ Excel file path:', unified_manager.get_excel_file_path())
        
    except Exception as e:
        print(f'‚ùå Unified system test failed: {e}')
        sys.exit(1)

asyncio.run(test_unified())
"; then
        log_success "Unified Excel system test passed"
    else
        log_error "Unified Excel system test failed"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
start_bot() {
    log "ü§ñ Starting bot..."
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
    local webhook_mode="${WEBHOOK_MODE:-false}"
    
    if [[ "$webhook_mode" == "true" ]]; then
        log "üï∏Ô∏è Running in webhook mode"
        if [[ -z "${WEBHOOK_URL:-}" ]]; then
            log_error "WEBHOOK_URL is required for webhook mode"
            exit 1
        fi
    else
        log "üîÑ Running in polling mode"
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    exec python3 bot.py
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
cleanup() {
    log "üßπ Cleaning up..."
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    jobs -p | xargs -r kill
    
    log "üëã Bot stopped"
}

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ –Ω–∞ –≤—ã—Ö–æ–¥
trap cleanup EXIT INT TERM

# –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏
show_help() {
    echo "Telegram Bot Startup Script"
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --install-deps     Install Python dependencies"
    echo "  --init-db         Initialize database only"
    echo "  --check           Check configuration without starting"
    echo "  --test-unified    Test unified Excel reporting system"
    echo "  --dev             Development mode (force polling)"
    echo "  --prod            Production mode (force webhook if configured)"
    echo "  --help            Show this help message"
    echo ""
    echo "Environment variables:"
    echo "  BOT_TOKEN         Telegram bot token (required)"
    echo "  WEBHOOK_MODE      Use webhook mode (true/false, default: false)"
    echo "  WEBHOOK_URL       Webhook URL (required if webhook mode)"
    echo "  TARGET_CHATS      Comma-separated chat IDs for unified Excel reports"
    echo "  REPORT_TIME       Time to send daily reports (HH:MM, default: 23:59)"
    echo "  SCHEDULER_ENABLED Enable automatic reports (true/false, default: true)"
    echo "  ADMIN_IDS         Comma-separated admin user IDs"
    echo ""
    echo "Unified Excel System:"
    echo "  üìä Creates subscribers_report.xlsx with –ò—Å—Ç–æ—Ä–∏—è, –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ sheets"
    echo "  üìÖ Daily sheets in –î–î-–ú–ú-–ì–ì–ì–ì format"
    echo "  ‚è∞ Automated daily reports at 23:59 Moscow time"
    echo "  üì§ Download button in Telegram messages"
    echo "  üß™ Test with: /test_unified command (admin only)"
    echo ""
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
INSTALL_DEPS=false
INIT_DB_ONLY=false
CHECK_ONLY=false
TEST_UNIFIED=false
DEV_MODE=false
PROD_MODE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --install-deps)
            INSTALL_DEPS=true
            shift
            ;;
        --init-db)
            INIT_DB_ONLY=true
            shift
            ;;
        --check)
            CHECK_ONLY=true
            shift
            ;;
        --test-unified)
            TEST_UNIFIED=true
            shift
            ;;
        --dev)
            DEV_MODE=true
            export WEBHOOK_MODE=false
            shift
            ;;
        --prod)
            PROD_MODE=true
            shift
            ;;
        --help)
            show_help
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    log "üìã Telegram Bot Starting Sequence"
    log "================================"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    check_dependencies
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ Nix –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    if [[ "$INSTALL_DEPS" == "true" ]]; then
        log_warning "Skipping dependency installation (Nix environment)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    check_environment
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_database
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    if [[ "$INIT_DB_ONLY" == "true" ]]; then
        log_success "Database initialization completed"
        exit 0
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º unified Excel —Å–∏—Å—Ç–µ–º—É
    check_unified_excel_system
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    check_scheduler_config
    
    # –ï—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ unified —Å–∏—Å—Ç–µ–º—ã
    if [[ "$TEST_UNIFIED" == "true" ]]; then
        test_unified_system
        log_success "Unified system test completed"
        exit 0
    fi
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞
    if [[ "$CHECK_ONLY" == "true" ]]; then
        log_success "Configuration check completed"
        exit 0
    fi
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    log "‚úÖ All checks passed"
    log "üöÄ Starting bot in 3 seconds..."
    sleep 3
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    start_bot
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
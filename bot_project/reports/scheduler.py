#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤.

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- –ï–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á—ë—Ç–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
- –ù–∞—Å—Ç—Ä–æ–π–∫—É –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ 
- –†–∞–±–æ—Ç—É —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
"""

import asyncio
import logging
from datetime import datetime, time, timedelta
from typing import Dict, List, Optional, Set, Any, Union, TYPE_CHECKING
from dataclasses import dataclass, field
from pathlib import Path

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.date import DateTrigger

# Type checking imports
if TYPE_CHECKING:
    from aiogram import Bot as AiogramBot
    from aiogram.types import FSInputFile as AiogramFSInputFile

# Runtime imports
try:
    from aiogram import Bot
    from aiogram.types import FSInputFile
    AIOGRAM_AVAILABLE = True
except ImportError:
    # Fallback for when aiogram is not available
    AIOGRAM_AVAILABLE = False
    Bot = Any
    FSInputFile = Any

from db.db import DatabaseManager
from utils.time_utils import get_almaty_now, format_datetime_for_report
from utils.logging_conf import get_logger
from reports.report_manager import ReportManager
from reports.unified_report_manager import UnifiedReportManager

logger = get_logger(__name__)


@dataclass
class ScheduleConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤."""
    report_time: time = field(default_factory=lambda: time(23, 59))  # 23:59 –ø–æ –ê–ª–º–∞—Ç—ã
    target_chats: List[int] = field(default_factory=list)  # –°–ø–∏—Å–æ–∫ chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    enabled: bool = True
    report_types: List[str] = field(default_factory=lambda: ['daily'])  # daily, weekly, monthly


class ReportScheduler:
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    - –ú–µ—Å—è—á–Ω—ã–µ –æ—Ç—á—ë—Ç—ã (1 —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞)
    - –û—Ç–ø—Ä–∞–≤–∫—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤
    - –ê–ª–º–∞—Ç–∏–Ω—Å–∫–æ–µ –≤—Ä–µ–º—è
    """
    
    def __init__(self, bot: Optional['AiogramBot'], db_manager: DatabaseManager, 
                 reports_dir: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å None –µ—Å–ª–∏ aiogram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
            db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            reports_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤
        """
        self.bot = bot
        self.db_manager = db_manager
        reports_dir_str = reports_dir if reports_dir is not None else "reports_output"
        self.report_manager = ReportManager(db_manager, reports_dir_str)
        # Initialize unified report manager for TZ-compliant reports
        self.unified_report_manager = UnifiedReportManager(db_manager, reports_dir_str)
        self.config = ScheduleConfig()
        self.scheduler = AsyncIOScheduler(timezone='Europe/Moscow')
        self.running = False
        self._sent_today: Set[str] = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
        
        logger.info("üïí [Scheduler] Initialized with default config")
    
    async def configure(self, report_time: Optional[time] = None,
                        target_chats: Optional[List[int]] = None,
                        enabled: Optional[bool] = None,
                        report_types: Optional[List[str]] = None) -> None:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
        
        Args:
            report_time: –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ (–ø–æ –ú–æ—Å–∫–≤–µ)
            target_chats: –°–ø–∏—Å–æ–∫ chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            enabled: –í–∫–ª—é—á—ë–Ω –ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            report_types: –¢–∏–ø—ã –æ—Ç—á—ë—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if report_time is not None:
            self.config.report_time = report_time
        if target_chats is not None:
            self.config.target_chats = target_chats
        if enabled is not None:
            self.config.enabled = enabled
        if report_types is not None:
            self.config.report_types = report_types
        
        # Auto-enable if we have target chats and use 23:59 timing 
        if len(self.config.target_chats) > 0 and not self.config.enabled:
            self.config.enabled = True
            logger.info(f"üîÑ [Scheduler] Auto-enabled scheduler with {len(self.config.target_chats)} target chats")
        
        logger.info(f"üîß [Scheduler] Configuration updated: time={self.config.report_time}, "
                   f"chats={len(self.config.target_chats)}, enabled={self.config.enabled}")
        
        # –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω
        if self.running:
            await self._setup_schedule()
    
    def add_target_chat(self, chat_id: int) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤."""
        if chat_id not in self.config.target_chats:
            self.config.target_chats.append(chat_id)
            logger.info(f"üìù [Scheduler] Added target chat: {chat_id}")
    
    def remove_target_chat(self, chat_id: int) -> None:
        """–£–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤."""
        if chat_id in self.config.target_chats:
            self.config.target_chats.remove(chat_id)
            logger.info(f"üóëÔ∏è [Scheduler] Removed target chat: {chat_id}")
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        if self.running:
            logger.warning("‚ö†Ô∏è [Scheduler] Already running")
            return
        
        if not self.config.enabled:
            logger.info("‚è∏Ô∏è [Scheduler] Disabled in config, not starting")
            return
        
        if not self.config.target_chats:
            logger.warning("‚ö†Ô∏è [Scheduler] No target chats configured")
            return
        
        if not AIOGRAM_AVAILABLE or self.bot is None:
            logger.warning("‚ö†Ô∏è [Scheduler] Aiogram not available or bot is None, scheduler disabled")
            return
        
        self.running = True
        await self._setup_schedule()
        self.scheduler.start()
        
        logger.info(f"üöÄ [Scheduler] Started with {len(self.config.target_chats)} target chats")
    
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        if not self.running:
            return
        
        self.running = False
        self.scheduler.shutdown(wait=True)
        
        logger.info("üõë [Scheduler] Stopped")
    
    async def _setup_schedule(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤."""
        # –û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
        self.scheduler.remove_all_jobs()
        
        # –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–∞—Ö
        self._cleanup_sent_today()
        
        if not self.config.enabled:
            return
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã
        if 'daily' in self.config.report_types:
            self.scheduler.add_job(
                self._send_daily_reports,
                CronTrigger(
                    hour=self.config.report_time.hour,
                    minute=self.config.report_time.minute,
                    timezone='Europe/Moscow'
                ),
                id='daily_reports',
                replace_existing=True,
                misfire_grace_time=300
            )
            logger.info(f"üìÖ [Scheduler] Daily reports scheduled for {self.config.report_time}")
        
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
        if 'weekly' in self.config.report_types:
            self.scheduler.add_job(
                self._send_weekly_reports,
                CronTrigger(
                    day_of_week='mon',  # Monday
                    hour=self.config.report_time.hour,
                    minute=self.config.report_time.minute,
                    timezone='Europe/Moscow'
                ),
                id='weekly_reports',
                replace_existing=True,
                misfire_grace_time=300
            )
            logger.info(f"üìä [Scheduler] Weekly reports scheduled for Monday {self.config.report_time}")
        
        # –ú–µ—Å—è—á–Ω—ã–µ –æ—Ç—á—ë—Ç—ã (1 —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞)
        if 'monthly' in self.config.report_types:
            self.scheduler.add_job(
                self._send_monthly_reports,
                CronTrigger(
                    day=1,  # 1st of month
                    hour=self.config.report_time.hour,
                    minute=self.config.report_time.minute,
                    timezone='Europe/Moscow'
                ),
                id='monthly_reports',
                replace_existing=True,
                misfire_grace_time=300
            )
            logger.info(f"üìà [Scheduler] Monthly reports scheduled for 1st of month {self.config.report_time}")
    
    def _cleanup_sent_today(self) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–∞—Ö –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–æ—Å—Ç–∞ –ø–∞–º—è—Ç–∏."""
        current_date = get_almaty_now().strftime('%Y-%m-%d')
        current_week = get_almaty_now().strftime('%Y-W%W')
        current_month = get_almaty_now().strftime('%Y-%m')
        
        # –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é/–º–µ—Å—è—Ü
        keys_to_keep = {
            f"daily_{current_date}",
            f"weekly_{current_week}", 
            f"monthly_{current_month}"
        }
        
        old_count = len(self._sent_today)
        self._sent_today = {key for key in self._sent_today if key in keys_to_keep}
        
        cleaned_count = old_count - len(self._sent_today)
        if cleaned_count > 0:
            logger.info(f"üßπ [Scheduler] Cleaned up {cleaned_count} old sent_today entries")
    
    async def _send_daily_reports(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã."""
        report_key = f"daily_{get_almaty_now().strftime('%Y-%m-%d')}"
        
        if report_key in self._sent_today:
            logger.info(f"‚è≠Ô∏è [Scheduler] Daily report already sent today: {report_key}")
            return
        
        logger.info("üìÖ [Scheduler] Generating daily report")
        
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å —Å –ø–æ–º–æ—â—å—é unified system
            yesterday = get_almaty_now() - timedelta(days=1)
            target_date = yesterday.strftime("%Y-%m-%d")
            
            # Get unified daily report message with download button
            message_text, download_keyboard = self.unified_report_manager.get_daily_message_with_button(target_date)
            file_path = self.unified_report_manager.get_excel_file_path()
            
            if not file_path:
                logger.error("‚ùå [Scheduler] No excel file path in unified report data")
                return
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —á–∞—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
            await self._send_unified_daily_reports(
                message_text=message_text,
                file_path=file_path,
                keyboard=download_keyboard
            )
            
            self._sent_today.add(report_key)
            logger.info(f"‚úÖ [Scheduler] Daily report sent successfully: {target_date}")
            
        except Exception as e:
            logger.exception(f"‚ùå [Scheduler] Failed to send daily report: {e}")
    
    async def _send_unified_daily_reports(self, message_text: str, file_path: str, 
                                         keyboard: 'InlineKeyboardMarkup') -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¢–ó —Å –∫–Ω–æ–ø–∫–æ–π —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
        if not self.bot or not AIOGRAM_AVAILABLE:
            logger.warning("‚ö†Ô∏è [Scheduler] Bot not available for unified daily reports")
            return
        
        for chat_id in self.config.target_chats:
            try:
                # Send message with keyboard
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    reply_markup=keyboard,
                    parse_mode=None
                )
                
                logger.info(f"üì§ [Scheduler] Unified daily report sent to chat {chat_id}")
                
            except Exception as e:
                logger.error(f"‚ùå [Scheduler] Failed to send unified daily report to chat {chat_id}: {e}")
    
    async def _send_weekly_reports(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã."""
        report_key = f"weekly_{get_almaty_now().strftime('%Y-W%W')}"
        
        if report_key in self._sent_today:
            logger.info(f"‚è≠Ô∏è [Scheduler] Weekly report already sent this week: {report_key}")
            return
        
        logger.info("üìä [Scheduler] Generating weekly report")
        
        try:
            # –û—Ç—á—ë—Ç –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é
            now = get_almaty_now()
            days_since_monday = now.weekday()
            last_monday = now - timedelta(days=days_since_monday + 7)
            target_date = last_monday.strftime("%Y-%m-%d")
            
            report_data = self.report_manager.generate_weekly_report(target_date)
            file_path = report_data.get('excel_file')
            
            if not file_path:
                logger.error("‚ùå [Scheduler] No excel file path in weekly report data")
                return
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
            await self._send_report_to_chats(
                file_path=file_path,
                caption=f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å {format_datetime_for_report(last_monday, False)}",
                report_type="weekly"
            )
            
            self._sent_today.add(report_key)
            logger.info(f"‚úÖ [Scheduler] Weekly report sent successfully: {target_date}")
            
        except Exception as e:
            logger.exception(f"‚ùå [Scheduler] Failed to send weekly report: {e}")
    
    async def _send_monthly_reports(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç."""
        now = get_almaty_now()
        report_key = f"monthly_{now.strftime('%Y-%m')}"
        
        if report_key in self._sent_today:
            logger.info(f"‚è≠Ô∏è [Scheduler] Monthly report already sent this month: {report_key}")
            return
        
        logger.info("üìà [Scheduler] Generating monthly report")
        
        try:
            # –û—Ç—á—ë—Ç –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
            if now.month == 1:
                last_month = now.replace(year=now.year - 1, month=12, day=1)
            else:
                last_month = now.replace(month=now.month - 1, day=1)
            
            target_date = last_month.strftime("%Y-%m-%d")
            
            report_data = self.report_manager.generate_monthly_report(target_date)
            file_path = report_data.get('excel_file')
            
            if not file_path:
                logger.error("‚ùå [Scheduler] No excel file path in monthly report data")
                return
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
            await self._send_report_to_chats(
                file_path=file_path,
                caption=f"üìà –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ {format_datetime_for_report(last_month, False)}",
                report_type="monthly"
            )
            
            self._sent_today.add(report_key)
            logger.info(f"‚úÖ [Scheduler] Monthly report sent successfully: {target_date}")
            
        except Exception as e:
            logger.exception(f"‚ùå [Scheduler] Failed to send monthly report: {e}")
    
    async def _send_report_to_chats(self, file_path: str, caption: str, 
                                   report_type: str) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –≤–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —á–∞—Ç—ã.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç—á—ë—Ç–∞
            caption: –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É
            report_type: –¢–∏–ø –æ—Ç—á—ë—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        if not self.config.target_chats:
            logger.warning(f"‚ö†Ô∏è [Scheduler] No target chats for {report_type} report")
            return
        
        if not AIOGRAM_AVAILABLE or self.bot is None:
            logger.error(f"‚ùå [Scheduler] Aiogram not available or bot is None")
            return
        
        file_path_obj = Path(file_path)
        if not file_path_obj.exists():
            logger.error(f"‚ùå [Scheduler] Report file not found: {file_path}")
            return
        
        success_count = 0
        
        for chat_id in self.config.target_chats:
            try:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
                if not AIOGRAM_AVAILABLE or FSInputFile is Any:
                    logger.error("‚ùå [Scheduler] FSInputFile not available")
                    continue
                document = FSInputFile(file_path_obj, filename=file_path_obj.name)
                await self.bot.send_document(
                    chat_id=chat_id,
                    document=document,
                    caption=caption
                )
                
                success_count += 1
                logger.info(f"üì§ [Scheduler] {report_type.title()} report sent to chat {chat_id}")
                
            except Exception as e:
                logger.exception(f"‚ùå [Scheduler] Failed to send {report_type} report to chat {chat_id}: {e}")
        
        logger.info(f"üìä [Scheduler] {report_type.title()} report sent to {success_count}/{len(self.config.target_chats)} chats")
    
    async def send_test_report(self, chat_id: int, report_type: str = "daily") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç.
        
        Args:
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            report_type: –¢–∏–ø –æ—Ç—á—ë—Ç–∞ (daily, weekly, monthly)
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        logger.info(f"üß™ [Scheduler] Sending test {report_type} report to chat {chat_id}")
        
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞
            now = get_almaty_now()
            
            if report_type == "daily":
                yesterday = now - timedelta(days=1)
                target_date = yesterday.strftime("%Y-%m-%d")
                report_data = self.report_manager.generate_daily_report(target_date)
                caption = f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ {format_datetime_for_report(yesterday, False)}"
                
            elif report_type == "weekly":
                days_since_monday = now.weekday()
                last_monday = now - timedelta(days=days_since_monday + 7)
                target_date = last_monday.strftime("%Y-%m-%d")
                report_data = self.report_manager.generate_weekly_report(target_date)
                caption = f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å {format_datetime_for_report(last_monday, False)}"
                
            elif report_type == "monthly":
                if now.month == 1:
                    last_month = now.replace(year=now.year - 1, month=12, day=1)
                else:
                    last_month = now.replace(month=now.month - 1, day=1)
                target_date = last_month.strftime("%Y-%m-%d")
                report_data = self.report_manager.generate_monthly_report(target_date)
                caption = f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ {format_datetime_for_report(last_month, False)}"
                
            else:
                logger.error(f"‚ùå [Scheduler] Unknown report type: {report_type}")
                return False
            
            file_path = report_data.get('excel_file')
            if not file_path:
                logger.error("‚ùå [Scheduler] No excel file path in test report data")
                return False
                
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞
            file_path_obj = Path(file_path)
            if not file_path_obj.exists():
                logger.error(f"‚ùå [Scheduler] Test report file not found: {file_path}")
                return False
            
            if not AIOGRAM_AVAILABLE or self.bot is None:
                logger.error("‚ùå [Scheduler] Aiogram not available or bot is None")
                return False
            
            if FSInputFile is Any:
                logger.error("‚ùå [Scheduler] FSInputFile not available")
                return False
            
            document = FSInputFile(file_path_obj, filename=file_path_obj.name)
            await self.bot.send_document(
                chat_id=chat_id,
                document=document,
                caption=caption
            )
            
            logger.info(f"‚úÖ [Scheduler] Test {report_type} report sent successfully to chat {chat_id}")
            return True
            
        except Exception as e:
            logger.exception(f"‚ùå [Scheduler] Failed to send test {report_type} report to chat {chat_id}: {e}")
            return False
    
    def get_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        """
        return {
            'running': self.running,
            'config': {
                'enabled': self.config.enabled,
                'report_time': self.config.report_time.strftime('%H:%M'),
                'target_chats_count': len(self.config.target_chats),
                'report_types': self.config.report_types
            },
            'jobs': [job.id for job in self.scheduler.get_jobs()] if self.running else [],
            'sent_today': list(self._sent_today),
            'aiogram_available': AIOGRAM_AVAILABLE,
            'bot_available': self.bot is not None
        }
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    
    async def send_daily_report_now(self, target_date: Optional[str] = None) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.
        
        Args:
            target_date: –î–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—á–µ—Ä–∞)
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        logger.info("üöÄ [Scheduler] Manual daily report generation requested")
        
        if target_date is None:
            yesterday = get_almaty_now() - timedelta(days=1)
            target_date = yesterday.strftime("%Y-%m-%d")
        
        try:
            report_data = self.report_manager.generate_daily_report(target_date)
            file_path = report_data.get('excel_file')
            
            if not file_path:
                raise ValueError("No excel file path in report data")
            
            if self.config.target_chats and AIOGRAM_AVAILABLE and self.bot is not None:
                await self._send_report_to_chats(
                    file_path=file_path,
                    caption=f"üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ {target_date}",
                    report_type="daily"
                )
            
            logger.info(f"‚úÖ [Scheduler] Manual daily report completed: {target_date}")
            return file_path
            
        except Exception as e:
            logger.exception(f"‚ùå [Scheduler] Manual daily report failed: {e}")
            raise
    
    async def send_weekly_report_now(self, target_date: Optional[str] = None) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.
        
        Args:
            target_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ–¥–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        logger.info("üöÄ [Scheduler] Manual weekly report generation requested")
        
        try:
            report_data = self.report_manager.generate_weekly_report(target_date)
            file_path = report_data.get('excel_file')
            
            if not file_path:
                raise ValueError("No excel file path in report data")
            
            if self.config.target_chats and AIOGRAM_AVAILABLE and self.bot is not None:
                await self._send_report_to_chats(
                    file_path=file_path,
                    caption=f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç",
                    report_type="weekly"
                )
            
            logger.info(f"‚úÖ [Scheduler] Manual weekly report completed")
            return file_path
            
        except Exception as e:
            logger.exception(f"‚ùå [Scheduler] Manual weekly report failed: {e}")
            raise
    
    async def send_monthly_report_now(self, target_date: Optional[str] = None) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.
        
        Args:
            target_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –º–µ—Å—è—Ü–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        logger.info("üöÄ [Scheduler] Manual monthly report generation requested")
        
        try:
            report_data = self.report_manager.generate_monthly_report(target_date)
            file_path = report_data.get('excel_file')
            
            if not file_path:
                raise ValueError("No excel file path in report data")
            
            if self.config.target_chats and AIOGRAM_AVAILABLE and self.bot is not None:
                await self._send_report_to_chats(
                    file_path=file_path,
                    caption=f"üìà –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç",
                    report_type="monthly"
                )
            
            logger.info(f"‚úÖ [Scheduler] Manual monthly report completed")
            return file_path
            
        except Exception as e:
            logger.exception(f"‚ùå [Scheduler] Manual monthly report failed: {e}")
            raise


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
async def schedule_daily_report(scheduler: ReportScheduler, target_date: Optional[str] = None) -> str:
    """
    –°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –≤—Ä—É—á–Ω—É—é.
    
    Args:
        scheduler: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        target_date: –î–∞—Ç–∞ –¥–ª—è –æ—Ç—á—ë—Ç–∞ (YYYY-MM-DD), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—á–µ—Ä–∞
        
    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    if target_date is None:
        yesterday = get_almaty_now() - timedelta(days=1)
        target_date = yesterday.strftime("%Y-%m-%d")
    
    logger.info(f"üìÖ [Manual] Generating daily report for {target_date}")
    report_data = scheduler.report_manager.generate_daily_report(target_date)
    file_path = report_data.get('excel_file')
    if not file_path:
        raise ValueError("No excel file path in report data")
    return file_path


async def schedule_weekly_report(scheduler: ReportScheduler, target_date: Optional[str] = None) -> str:
    """
    –°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –≤—Ä—É—á–Ω—É—é.
    
    Args:
        scheduler: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        target_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏ (YYYY-MM-DD), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ—à–ª—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        
    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    if target_date is None:
        now = get_almaty_now()
        days_since_monday = now.weekday()
        last_monday = now - timedelta(days=days_since_monday + 7)
        target_date = last_monday.strftime("%Y-%m-%d")
    
    logger.info(f"üìä [Manual] Generating weekly report for {target_date}")
    report_data = scheduler.report_manager.generate_weekly_report(target_date)
    file_path = report_data.get('excel_file')
    if not file_path:
        raise ValueError("No excel file path in report data")
    return file_path


async def schedule_monthly_report(scheduler: ReportScheduler, target_date: Optional[str] = None) -> str:
    """
    –°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç –≤—Ä—É—á–Ω—É—é.
    
    Args:
        scheduler: –≠–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        target_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞ (YYYY-MM-DD), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
        
    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    if target_date is None:
        now = get_almaty_now()
        if now.month == 1:
            last_month = now.replace(year=now.year - 1, month=12, day=1)
        else:
            last_month = now.replace(month=now.month - 1, day=1)
        target_date = last_month.strftime("%Y-%m-%d")
    
    logger.info(f"üìà [Manual] Generating monthly report for {target_date}")
    report_data = scheduler.report_manager.generate_monthly_report(target_date)
    file_path = report_data.get('excel_file')
    if not file_path:
        raise ValueError("No excel file path in report data")
    return file_path
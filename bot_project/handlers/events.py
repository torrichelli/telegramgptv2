#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Telegram –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —á–∞—Ç–∞—Ö.

–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç:
- –ü–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –∫–∞–Ω–∞–ª–æ–≤
- –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ —á–∞—Ç–æ–≤  
- –í—Ö–æ–¥/–≤—ã—Ö–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –≥—Ä—É–ø–ø
- –°–æ–∑–¥–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤
"""

import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Any

from aiogram import Router, F
from aiogram.types import (
    ChatMemberUpdated, 
    ChatMemberOwner, 
    ChatMemberAdministrator,
    ChatMemberMember, 
    ChatMemberRestricted,
    ChatMemberLeft, 
    ChatMemberBanned
)
from aiogram.enums import ChatType, ChatMemberStatus

from db.db import get_db
from utils.time_utils import get_almaty_now
from utils.logging_conf import get_logger

logger = get_logger(__name__)

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
events_router = Router(name="events")


@events_router.chat_member()
async def handle_chat_member_update(chat_member: ChatMemberUpdated):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.
    
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç:
    - –ü–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –∫–∞–Ω–∞–ª–æ–≤
    - –í—Ö–æ–¥/–≤—ã—Ö–æ–¥ –∏–∑ –≥—Ä—É–ø–ø
    - –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        chat = chat_member.chat
        user = chat_member.new_chat_member.user
        old_status = chat_member.old_chat_member.status
        new_status = chat_member.new_chat_member.status
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        chat_type_str = chat.type.value if hasattr(chat.type, 'value') else str(chat.type)
        logger.info(f"üìù [Events] Chat member update: chat_id={chat.id}, chat_type={chat_type_str}, "
                   f"user_id={user.id}, old_status={old_status}, new_status={new_status}")
        
        # –ü–æ–ª—É—á–∞–µ–º invite_link –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        invite_link = getattr(chat_member, 'invite_link', None)
        if invite_link:
            logger.info(f"üîó [Events] Invite link detected: {invite_link}")
        
        # –ü–æ–ª—É—á–∞–µ–º update_id –¥–ª—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (–±–µ–∑ fallback –Ω–∞ timestamp)
        update_id = None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        event_type = _determine_event_type(chat.type, old_status, new_status)
        
        if not event_type:
            logger.debug(f"‚è≠Ô∏è [Events] Skipping non-tracked status change: {old_status} ‚Üí {new_status}")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è –∏–∑ invite_link
        inviter_id = None
        if invite_link:
            try:
                db = get_db()
                inviter_id = db.get_inviter_by_link(invite_link)
                if inviter_id:
                    logger.info(f"üë§ [Events] Found inviter_id={inviter_id} for link: {invite_link}")
                else:
                    logger.warning(f"‚ö†Ô∏è [Events] No inviter found for link: {invite_link}")
            except Exception as e:
                logger.error(f"‚ùå [Events] Error finding inviter for link {invite_link}: {e}")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        event_data = {
            'telegram_update_id': update_id,
            'chat_id': chat.id,
            'chat_title': chat.title or chat.username or f"Chat_{chat.id}",
            'chat_type': chat_type_str,
            'user_id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'event_type': event_type,
            'old_status': old_status.value if hasattr(old_status, 'value') else str(old_status),
            'new_status': new_status.value if hasattr(new_status, 'value') else str(new_status),
            'timestamp': get_almaty_now(),
            'is_bot': user.is_bot,
            'raw_data': {
                'chat': {
                    'id': chat.id,
                    'type': chat_type_str,
                    'title': chat.title,
                    'username': chat.username,
                    'description': getattr(chat, 'description', None),
                },
                'user': {
                    'id': user.id,
                    'username': user.username,
                    'first_name': user.first_name,
                    'last_name': user.last_name,
                    'is_bot': user.is_bot,
                    'language_code': getattr(user, 'language_code', None),
                },
                'status_change': {
                    'old': old_status.value if hasattr(old_status, 'value') else str(old_status),
                    'new': new_status.value if hasattr(new_status, 'value') else str(new_status),
                    'date': chat_member.date.isoformat() if chat_member.date else None,
                }
            }
        }
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if 'db' not in locals():
            db = get_db()
        db.insert_journal_event(
            event_type=event_type,
            tg_user_id=user.id,
            username=user.username,
            name=user.first_name,
            status=new_status.value if hasattr(new_status, 'value') else str(new_status),
            telegram_update_id=update_id,
            inviter_id=inviter_id
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Excel —Ñ–∞–π–ª —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        try:
            from reports.subscribers_database_manager import SubscribersDatabaseManager
            excel_manager = SubscribersDatabaseManager(db)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è
            inviter_name = "–ù–µ —É–∫–∞–∑–∞–Ω"
            if inviter_id:
                inviter_data = db.get_inviter_name_by_id(inviter_id)
                if inviter_data:
                    inviter_name = inviter_data
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
            excel_event_data = {
                'event_time': get_almaty_now().isoformat(),
                'event_type': event_type,
                'tg_user_id': user.id,
                'username': user.username or '',
                'user_name': user.first_name or '',
                'inviter_name': inviter_name,
                'status': new_status.value if hasattr(new_status, 'value') else str(new_status)
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –µ–¥–∏–Ω—ã–π Excel —Ñ–∞–π–ª subscribers_database.xlsx
            excel_manager.add_history_event(excel_event_data)
            logger.info(f"üìä [Events] Added to Excel: {event_type} for user {user.id}")
            
        except Exception as excel_error:
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –µ—Å–ª–∏ Excel –¥–∞–µ—Ç –æ—à–∏–±–∫—É
            logger.error(f"‚ùå [Events] Excel update error: {excel_error}")
        
        logger.info(f"‚úÖ [Events] Recorded {event_type} event: "
                   f"chat_id={chat.id}, user_id={user.id}")
        
    except Exception as e:
        logger.exception(f"‚ùå [Events] Error handling chat member update: {e}")


@events_router.my_chat_member()
async def handle_bot_chat_member_update(my_chat_member: ChatMemberUpdated):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–∞—Ö.
    
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–æ–≥–¥–∞ –±–æ—Ç–∞:
    - –î–æ–±–∞–≤–ª—è—é—Ç –≤ —á–∞—Ç
    - –£–¥–∞–ª—è—é—Ç –∏–∑ —á–∞—Ç–∞
    - –ò–∑–º–µ–Ω—è—é—Ç –µ–≥–æ –ø—Ä–∞–≤–∞
    - –ë–ª–æ–∫–∏—Ä—É—é—Ç/—Ä–∞–∑–±–ª–æ–∫–∏—Ä—É—é—Ç
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        chat = my_chat_member.chat
        bot_user = my_chat_member.new_chat_member.user
        old_status = my_chat_member.old_chat_member.status
        new_status = my_chat_member.new_chat_member.status
        
        # –ü–æ–ª—É—á–∞–µ–º update_id –¥–ª—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp –∫–∞–∫ fallback)
        update_id = getattr(my_chat_member, 'update_id', None) or int(get_almaty_now().timestamp())
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        logger.info(f"ü§ñ [Events] Bot status update: chat_id={chat.id}, "
                   f"old_status={old_status}, new_status={new_status}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è –±–æ—Ç–∞
        event_type = _determine_bot_event_type(chat.type, old_status, new_status)
        
        if not event_type:
            logger.debug(f"‚è≠Ô∏è [Events] Skipping non-tracked bot status change: {old_status} ‚Üí {new_status}")
            return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        event_data = {
            'telegram_update_id': update_id,
            'chat_id': chat.id,
            'chat_title': chat.title or chat.username or f"Chat_{chat.id}",
            'chat_type': chat_type_str,
            'user_id': bot_user.id,
            'username': bot_user.username,
            'first_name': bot_user.first_name,
            'last_name': bot_user.last_name,
            'event_type': event_type,
            'old_status': old_status.value if hasattr(old_status, 'value') else str(old_status),
            'new_status': new_status.value if hasattr(new_status, 'value') else str(new_status),
            'timestamp': get_almaty_now(),
            'is_bot': True,
            'raw_data': {
                'chat': {
                    'id': chat.id,
                    'type': chat_type_str,
                    'title': chat.title,
                    'username': chat.username,
                    'description': getattr(chat, 'description', None),
                },
                'bot': {
                    'id': bot_user.id,
                    'username': bot_user.username,
                    'first_name': bot_user.first_name,
                    'last_name': bot_user.last_name,
                    'is_bot': True,
                },
                'status_change': {
                    'old': old_status.value if hasattr(old_status, 'value') else str(old_status),
                    'new': new_status.value if hasattr(new_status, 'value') else str(new_status),
                    'date': my_chat_member.date.isoformat() if my_chat_member.date else None,
                }
            }
        }
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = get_db()
        db.insert_journal_event(
            event_type=event_type,
            tg_user_id=bot_user.id,
            username=bot_user.username,
            name=bot_user.first_name,
            status=new_status.value if hasattr(new_status, 'value') else str(new_status),
            telegram_update_id=update_id
        )
        
        logger.info(f"‚úÖ [Events] Recorded bot {event_type} event: chat_id={chat.id}")
        
    except Exception as e:
        logger.exception(f"‚ùå [Events] Error handling bot chat member update: {e}")


def _determine_event_type(chat_type: ChatType, old_status: ChatMemberStatus, 
                         new_status: ChatMemberStatus) -> Optional[str]:
    """
    –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —á–∞—Ç–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.
    
    Args:
        chat_type: –¢–∏–ø —á–∞—Ç–∞ (channel, group, supergroup, private)
        old_status: –°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
        new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
        
    Returns:
        str –∏–ª–∏ None: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    """
    # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤
    if chat_type == ChatType.CHANNEL:
        if old_status == ChatMemberStatus.LEFT and new_status == ChatMemberStatus.MEMBER:
            return "subscribe"
        elif old_status == ChatMemberStatus.MEMBER and new_status == ChatMemberStatus.LEFT:
            return "unsubscribe"
        elif old_status == ChatMemberStatus.MEMBER and new_status == ChatMemberStatus.BANNED:
            return "channel_banned"
        elif old_status == ChatMemberStatus.BANNED and new_status == ChatMemberStatus.MEMBER:
            return "channel_unbanned"
    
    # –î–ª—è –≥—Ä—É–ø–ø –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø
    elif chat_type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        if old_status == ChatMemberStatus.LEFT and new_status in [
            ChatMemberStatus.MEMBER, ChatMemberStatus.RESTRICTED
        ]:
            return "group_join"
        elif old_status in [
            ChatMemberStatus.MEMBER, ChatMemberStatus.RESTRICTED
        ] and new_status == ChatMemberStatus.LEFT:
            return "group_leave"
        elif old_status in [
            ChatMemberStatus.MEMBER, ChatMemberStatus.RESTRICTED
        ] and new_status == ChatMemberStatus.BANNED:
            return "group_banned"
        elif old_status == ChatMemberStatus.BANNED and new_status in [
            ChatMemberStatus.MEMBER, ChatMemberStatus.RESTRICTED
        ]:
            return "group_unbanned"
        elif old_status == ChatMemberStatus.MEMBER and new_status == ChatMemberStatus.ADMINISTRATOR:
            return "group_promoted"
        elif old_status == ChatMemberStatus.ADMINISTRATOR and new_status == ChatMemberStatus.MEMBER:
            return "group_demoted"
    
    # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã (—Ö–æ—Ç—è —Ç–∞–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–¥–∫–∏)
    elif chat_type == ChatType.PRIVATE:
        if old_status == ChatMemberStatus.LEFT and new_status == ChatMemberStatus.MEMBER:
            return "private_unblocked"
        elif old_status == ChatMemberStatus.MEMBER and new_status == ChatMemberStatus.BANNED:
            return "private_blocked"
    
    return None


def _determine_bot_event_type(chat_type: ChatType, old_status: ChatMemberStatus, 
                             new_status: ChatMemberStatus) -> Optional[str]:
    """
    –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞.
    
    Args:
        chat_type: –¢–∏–ø —á–∞—Ç–∞
        old_status: –°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        
    Returns:
        str –∏–ª–∏ None: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    """
    # –î–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤
    if old_status == ChatMemberStatus.LEFT and new_status in [
        ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR
    ]:
        return "bot_added"
    elif old_status in [
        ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR
    ] and new_status == ChatMemberStatus.LEFT:
        return "bot_removed"
    elif old_status in [
        ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR
    ] and new_status == ChatMemberStatus.BANNED:
        return "bot_banned"
    elif old_status == ChatMemberStatus.BANNED and new_status in [
        ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR
    ]:
        return "bot_unbanned"
    elif old_status == ChatMemberStatus.MEMBER and new_status == ChatMemberStatus.ADMINISTRATOR:
        return "bot_promoted"
    elif old_status == ChatMemberStatus.ADMINISTRATOR and new_status == ChatMemberStatus.MEMBER:
        return "bot_demoted"
    
    return None


async def log_event_statistics():
    """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."""
    try:
        db = get_db()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        now = get_almaty_now()
        stats = db.get_events_for_period(
            start_date=(now.replace(minute=0, second=0, microsecond=0) - 
                       timedelta(hours=1)).strftime("%Y-%m-%d %H:%M:%S"),
            end_date=now.strftime("%Y-%m-%d %H:%M:%S")
        )
        
        if stats:
            logger.info(f"üìä [Events] Processed {len(stats)} events in the last hour")
        
    except Exception as e:
        logger.exception(f"‚ùå [Events] Error logging event statistics: {e}")


# –≠–∫—Å–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
__all__ = ['events_router', 'log_event_statistics']
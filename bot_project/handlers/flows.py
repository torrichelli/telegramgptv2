#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FSM flows –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –≤ Telegram –±–æ—Ç–µ.
–†–µ–∞–ª–∏–∑—É–µ—Ç –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
"""

import logging
from typing import Dict, List, Optional, Any
from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from handlers.commands import is_admin
from handlers.ui import UIStates, back_kb, main_admin_kb, confirm_delete_kb
from utils.adapter import add_user_manual, delete_user, find_user, get_settings_manager
from utils.logging_conf import get_logger

logger = get_logger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è flows
flows_router = Router(name="flows")


# === MANUAL ADD USER FLOW ===

@flows_router.callback_query(F.data == "menu:manual_add")
async def start_manual_add_flow(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    text = (
        "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é**\n\n"
        "–®–∞–≥ 1 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
    )
    
    await callback.message.edit_text(text, reply_markup=back_kb(), parse_mode="Markdown")
    await state.set_state(UIStates.waiting_user_id)
    await callback.answer()


@flows_router.message(UIStates.waiting_user_id)
async def handle_user_id_input(message: Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ user ID."""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    try:
        user_id_str = message.text.strip()
        user_id = int(user_id_str)
        
        if user_id <= 0:
            raise ValueError("Invalid user ID")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(tg_user_id=user_id)
        
        text = (
            f"‚úÖ User ID: `{user_id}`\n\n"
            "–®–∞–≥ 2 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ username (–±–µ–∑ @) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å–∫–∞
        skip_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip:username")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ])
        
        await message.answer(text, reply_markup=skip_kb, parse_mode="Markdown")
        await state.set_state(UIStates.waiting_username)
        
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID:",
            reply_markup=back_kb()
        )


@flows_router.message(UIStates.waiting_username)
async def handle_username_input(message: Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ username."""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    username = message.text.strip()
    
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    if username.startswith('@'):
        username = username[1:]
    
    await state.update_data(username=username if username else None)
    
    data = await state.get_data()
    user_id = data.get('tg_user_id')
    
    text = (
        f"‚úÖ User ID: `{user_id}`\n"
        f"‚úÖ Username: {f'@{username}' if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        "–®–∞–≥ 3 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:"
    )
    
    skip_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip:name")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
    ])
    
    await message.answer(text, reply_markup=skip_kb, parse_mode="Markdown")
    await state.set_state(UIStates.waiting_user_name)


@flows_router.callback_query(F.data == "skip:username")
async def skip_username(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ username."""
    await state.update_data(username=None)
    
    data = await state.get_data()
    user_id = data.get('tg_user_id')
    
    text = (
        f"‚úÖ User ID: `{user_id}`\n"
        f"‚úÖ Username: –Ω–µ —É–∫–∞–∑–∞–Ω\n\n"
        "–®–∞–≥ 3 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:"
    )
    
    skip_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip:name")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
    ])
    
    await callback.message.edit_text(text, reply_markup=skip_kb, parse_mode="Markdown")
    await state.set_state(UIStates.waiting_user_name)
    await callback.answer()


@flows_router.message(UIStates.waiting_user_name)
async def handle_user_name_input(message: Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    name = message.text.strip()
    await state.update_data(name=name if name else None)
    
    data = await state.get_data()
    user_id = data.get('tg_user_id')
    username = data.get('username')
    
    text = (
        f"‚úÖ User ID: `{user_id}`\n"
        f"‚úÖ Username: {f'@{username}' if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"‚úÖ –ò–º—è: {name if name else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        "–®–∞–≥ 4 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:"
    )
    
    skip_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip:inviter")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
    ])
    
    await message.answer(text, reply_markup=skip_kb, parse_mode="Markdown")
    await state.set_state(UIStates.waiting_inviter)


@flows_router.callback_query(F.data == "skip:name")
async def skip_name(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –∏–º–µ–Ω–∏."""
    await state.update_data(name=None)
    
    data = await state.get_data()
    user_id = data.get('tg_user_id')
    username = data.get('username')
    
    text = (
        f"‚úÖ User ID: `{user_id}`\n"
        f"‚úÖ Username: {f'@{username}' if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"‚úÖ –ò–º—è: –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n\n"
        "–®–∞–≥ 4 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:"
    )
    
    skip_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip:inviter")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
    ])
    
    await callback.message.edit_text(text, reply_markup=skip_kb, parse_mode="Markdown")
    await state.set_state(UIStates.waiting_inviter)
    await callback.answer()


@flows_router.message(UIStates.waiting_inviter)
async def handle_inviter_input(message: Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    try:
        inviter_name = message.text.strip()
        
        data = await state.get_data()
        data['inviter_name'] = inviter_name if inviter_name else None
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = add_user_manual(data)
        
        if success:
            text = (
                "‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
                f"üë§ User ID: `{data['tg_user_id']}`\n"
                f"üë§ Username: {'@' + data['username'] if data.get('username') else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üë§ –ò–º—è: {data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üë§ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å: {data.get('inviter_name', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            )
        else:
            text = "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        
        await message.answer(text, reply_markup=main_admin_kb(), parse_mode="Markdown")
        await state.clear()
        
        if success:
            logger.info(f"Manually added user {data['tg_user_id']} by admin {message.from_user.id}")
        
    except Exception as e:
        logger.exception(f"Error in manual add flow: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@flows_router.callback_query(F.data == "skip:inviter")
async def skip_inviter(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ."""
    try:
        data = await state.get_data()
        data['inviter_name'] = None
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = add_user_manual(data)
        
        if success:
            text = (
                "‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
                f"üë§ User ID: `{data['tg_user_id']}`\n"
                f"üë§ Username: {'@' + data['username'] if data.get('username') else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üë§ –ò–º—è: {data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üë§ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å: –Ω–µ —É–∫–∞–∑–∞–Ω\n"
            )
        else:
            text = "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        
        await callback.message.edit_text(text, reply_markup=main_admin_kb(), parse_mode="Markdown")
        await state.clear()
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!")
        
        if success:
            logger.info(f"Manually added user {data['tg_user_id']} by admin {callback.from_user.id}")
        
    except Exception as e:
        logger.exception(f"Error in manual add flow: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏", show_alert=True)


# === DELETE USER FLOW ===

@flows_router.callback_query(F.data == "menu:delete_user")
async def start_delete_user_flow(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    text = (
        "‚ùå **–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    )
    
    await callback.message.edit_text(text, reply_markup=back_kb(), parse_mode="Markdown")
    await state.set_state(UIStates.waiting_delete_user)
    await callback.answer()


@flows_router.message(UIStates.waiting_delete_user)
async def handle_delete_user_input(message: Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    try:
        search_query = message.text.strip()
        user_data = find_user(search_query)
        
        if not user_data:
            await message.reply(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{search_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=back_kb()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(
            search_query=search_query,
            user_data=user_data
        )
        
        username_display = f"@{user_data.get('username')}" if user_data.get('username') else f"ID: {user_data['tg_user_id']}"
        name_display = user_data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        
        text = (
            f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
            f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\n"
            f"üë§ **{username_display}**\n"
            f"üìù –ò–º—è: {name_display}\n"
            f"üìä –ü–æ–¥–ø–∏—Å–æ–∫: {user_data.get('subscribe_count', 0)}\n"
            f"üìä –û—Ç–ø–∏—Å–æ–∫: {user_data.get('unsubscribe_count', 0)}\n\n"
            "‚ùóÔ∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
        )
        
        await message.answer(
            text, 
            reply_markup=confirm_delete_kb(search_query), 
            parse_mode="Markdown"
        )
        await state.set_state(UIStates.waiting_delete_confirm)
        
    except Exception as e:
        logger.exception(f"Error in delete user flow: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@flows_router.callback_query(F.data.startswith("confirm:delete:"))
async def handle_delete_confirmation(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ callback data
        search_query = callback.data.split(":", 2)[2]
        
        success = delete_user(search_query)
        
        if success:
            text = f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {search_query} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!**"
            await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!")
        else:
            text = f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {search_query}**"
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
        
        await callback.message.edit_text(text, reply_markup=main_admin_kb(), parse_mode="Markdown")
        await state.clear()
        
        if success:
            logger.info(f"Deleted user {search_query} by admin {callback.from_user.id}")
        
    except Exception as e:
        logger.exception(f"Error confirming delete: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)


# === SETTINGS FLOW ===

@flows_router.callback_query(F.data == "menu:settings")
async def handle_settings_menu(callback: CallbackQuery, **kwargs):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    try:
        settings = get_settings_manager().get_current_settings()
        
        text = (
            "üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n"
            f"‚è∞ –í—Ä–µ–º—è –æ—Ç—á–µ—Ç–æ–≤: {settings['report_time']}\n"
            f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {len(settings['target_chats'])} —á–∞—Ç(–æ–≤)\n"
            f"üìä –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {'–≤–∫–ª—é—á–µ–Ω' if settings['scheduler_enabled'] else '–≤—ã–∫–ª—é—á–µ–Ω'}\n"
            f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {len(settings['admin_ids'])}"
        )
        
        buttons = [
            [InlineKeyboardButton(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="settings:time")],
            [InlineKeyboardButton(text="üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="settings:add_admin")],
            [InlineKeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ", callback_data="settings:show")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
        
    except Exception as e:
        logger.exception(f"Error in settings menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


@flows_router.callback_query(F.data == "settings:time")
async def handle_change_time(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—á–µ—Ç–æ–≤."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    text = (
        "‚è∞ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—á–µ—Ç–æ–≤**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):"
    )
    
    await callback.message.edit_text(text, reply_markup=back_kb(), parse_mode="Markdown")
    await state.set_state(UIStates.waiting_report_time)
    await callback.answer()


@flows_router.message(UIStates.waiting_report_time)
async def handle_report_time_input(message: Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—á–µ—Ç–æ–≤."""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    try:
        time_str = message.text.strip()
        
        success = get_settings_manager().set_report_time(time_str)
        
        if success:
            text = f"‚úÖ **–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {time_str}**"
        else:
            text = "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)"
        
        await message.answer(text, reply_markup=main_admin_kb(), parse_mode="Markdown")
        await state.clear()
        
        if success:
            logger.info(f"Report time changed to {time_str} by admin {message.from_user.id}")
        
    except Exception as e:
        logger.exception(f"Error setting report time: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏")


@flows_router.callback_query(F.data == "settings:add_admin")
async def handle_add_admin(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    text = (
        "üëë **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
    )
    
    await callback.message.edit_text(text, reply_markup=back_kb(), parse_mode="Markdown")
    await state.set_state(UIStates.waiting_admin_id)
    await callback.answer()


@flows_router.message(UIStates.waiting_admin_id)
async def handle_admin_id_input(message: Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    try:
        admin_id_str = message.text.strip()
        admin_id = int(admin_id_str)
        
        if admin_id <= 0:
            raise ValueError("Invalid admin ID")
        
        success = get_settings_manager().add_admin(admin_id)
        
        if success:
            text = f"‚úÖ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –¥–æ–±–∞–≤–ª–µ–Ω!**"
        else:
            text = "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**"
        
        await message.answer(text, reply_markup=main_admin_kb(), parse_mode="Markdown")
        await state.clear()
        
        if success:
            logger.info(f"Added admin {admin_id} by admin {message.from_user.id}")
        
    except ValueError:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID:",
            reply_markup=back_kb()
        )
    except Exception as e:
        logger.exception(f"Error adding admin: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")


@flows_router.callback_query(F.data == "settings:show")
async def handle_show_settings(callback: CallbackQuery, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    try:
        settings = get_settings_manager().get_current_settings()
        
        text = "üîî **–ü–æ–¥—Ä–æ–±–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
        text += f"‚è∞ **–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–æ–≤:** {settings['report_time']}\n"
        text += f"üìä **–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:** {'–≤–∫–ª—é—á–µ–Ω' if settings['scheduler_enabled'] else '–≤—ã–∫–ª—é—á–µ–Ω'}\n\n"
        
        if settings['target_chats']:
            text += f"üë• **–ß–∞—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ ({len(settings['target_chats'])}):**\n"
            for chat_id in settings['target_chats'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                text += f"‚Ä¢ `{chat_id}`\n"
            if len(settings['target_chats']) > 5:
                text += f"‚Ä¢ ... –∏ –µ—â–µ {len(settings['target_chats']) - 5}\n"
        else:
            text += "üë• **–ß–∞—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤:** –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n"
        
        text += "\n"
        
        if settings['admin_ids']:
            text += f"üëë **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ({len(settings['admin_ids'])}):**\n"
            for admin_id in settings['admin_ids'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5
                text += f"‚Ä¢ `{admin_id}`\n"
            if len(settings['admin_ids']) > 5:
                text += f"‚Ä¢ ... –∏ –µ—â–µ {len(settings['admin_ids']) - 5}\n"
        else:
            text += "üëë **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:** –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n"
        
        back_settings_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="menu:settings")]
        ])
        
        await callback.message.edit_text(text, reply_markup=back_settings_kb, parse_mode="Markdown")
        await callback.answer()
        
    except Exception as e:
        logger.exception(f"Error showing settings: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
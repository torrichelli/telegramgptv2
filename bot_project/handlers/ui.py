#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
UI –º–æ–¥—É–ª—å —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ –¥–ª—è Telegram –±–æ—Ç–∞.
–†–µ–∞–ª–∏–∑—É–µ—Ç –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∏ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏.
"""

import logging
from typing import Dict, List, Optional, Any
from datetime import datetime

from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile
)
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from pathlib import Path

from handlers.commands import is_admin, ADMIN_IDS
from utils.adapter import (
    create_invite_for, get_invites, find_user, add_user_manual, 
    delete_user, export_excel, get_stats, get_inviter_list,
    get_invite_manager, get_user_manager, get_report_adapter, get_settings_manager
)
from reports.unified_report_manager import UnifiedReportManager
from db.db import get_db
from utils.logging_conf import get_logger
from utils.time_utils import format_datetime_for_report, get_almaty_now

logger = get_logger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è UI
ui_router = Router(name="ui")

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
class UIStates(StatesGroup):
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    waiting_inviter_name = State()
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    waiting_user_search = State()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é
    waiting_user_id = State()
    waiting_username = State()
    waiting_user_name = State()
    waiting_inviter = State()
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    waiting_delete_confirm = State()
    waiting_delete_user = State()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    waiting_report_time = State()
    waiting_admin_id = State()


def main_admin_kb() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    buttons = [
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", callback_data="menu:create_invite")],
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö", callback_data="menu:list_invites")],
        [
            InlineKeyboardButton(text="üìä –û—Ç—á—ë—Ç—ã", callback_data="menu:reports"),
            InlineKeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="menu:rating")
        ],
        [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç Excel", callback_data="menu:export_excel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def user_menu_kb() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª–µ–π)."""
    buttons = [
        [InlineKeyboardButton(text="üì• –ú–æ–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ", callback_data="user:my_invited")],
        [InlineKeyboardButton(text="üèÜ –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user:my_stats")],
        [InlineKeyboardButton(text="üì§ –°–∫–∞—á–∞—Ç—å Excel (–º–æ–∏ –¥–∞–Ω–Ω—ã–µ)", callback_data="user:my_excel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def reports_kb() -> InlineKeyboardMarkup:
    """–ü–æ–¥–º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤."""
    buttons = [
        [
            InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="reports:today"),
            InlineKeyboardButton(text="üìä –ù–µ–¥–µ–ª—è", callback_data="reports:week")
        ],
        [
            InlineKeyboardButton(text="üìà –ú–µ—Å—è—Ü", callback_data="reports:month"),
            InlineKeyboardButton(text="üìí –ü–æ–ª–Ω—ã–π Excel", callback_data="reports:excel")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def back_kb() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
    ])


def confirm_delete_kb(username: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è."""
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm:delete:{username}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu:back")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@ui_router.message(CommandStart())
async def handle_start_ui(message: Message, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å UI –º–µ–Ω—é."""
    user = message.from_user
    user_id = user.id
    
    logger.info(f"UI Start command from user {user_id} (@{user.username})")
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
    
    if is_admin(user_id):
        welcome_text += (
            "üîê **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
            "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –æ—Ç—á–µ—Ç–∞–º–∏:"
        )
        keyboard = main_admin_kb()
    else:
        welcome_text += (
            "üìä **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è**\n\n"
            "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏:"
        )
        keyboard = user_menu_kb()
    
    await message.answer(welcome_text, reply_markup=keyboard, parse_mode="Markdown")


@ui_router.message(Command("menu"))
async def handle_menu_command(message: Message, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await handle_start_ui(message, **kwargs)


# === ADMIN MENU HANDLERS ===

@ui_router.callback_query(F.data == "menu:create_invite")
async def handle_create_invite_menu(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª–µ–π
        inviter_list = get_inviter_list()
        
        text = (
            "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ:"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è–º–∏
        buttons = []
        for inviter in inviter_list[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            buttons.append([InlineKeyboardButton(
                text=f"üë§ {inviter}", 
                callback_data=f"invite:existing:{inviter}"
            )])
        
        buttons.append([InlineKeyboardButton(
            text="‚ûï –ù–æ–≤—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å", 
            callback_data="invite:new"
        )])
        buttons.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
        
    except Exception as e:
        logger.exception(f"Error in create invite menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é", show_alert=True)


@ui_router.callback_query(F.data.startswith("invite:existing:"))
async def handle_existing_inviter(callback: CallbackQuery, **kwargs):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    try:
        inviter_name = callback.data.split(":", 2)[2]
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –∫–∞–Ω–∞–ª
        bot = callback.bot
        invite_link = await create_invite_for(inviter_name, bot)
        
        text = (
            f"‚úÖ **–°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {inviter_name}!**\n\n"
            f"`{invite_link}`\n\n"
            "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—é."
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        buttons = [
            [InlineKeyboardButton(text="üîó –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", url=invite_link)],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:create_invite")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!")
        
        logger.info(f"Created invite link for {inviter_name} by admin {callback.from_user.id}")
        
    except Exception as e:
        logger.exception(f"Error creating invite for existing inviter: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏", show_alert=True)


@ui_router.callback_query(F.data == "invite:new")
async def handle_new_inviter(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    text = (
        "‚úèÔ∏è **–ù–æ–≤—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è:"
    )
    
    await callback.message.edit_text(text, reply_markup=back_kb(), parse_mode="Markdown")
    await state.set_state(UIStates.waiting_inviter_name)
    await callback.answer()


@ui_router.message(UIStates.waiting_inviter_name)
async def handle_inviter_name_input(message: Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è."""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    try:
        inviter_name = message.text.strip()
        
        if not inviter_name or len(inviter_name) > 50:
            await message.reply(
                "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=back_kb()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –∫–∞–Ω–∞–ª
        bot = message.bot
        invite_link = await create_invite_for(inviter_name, bot)
        
        text = (
            f"‚úÖ **–°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {inviter_name}!**\n\n"
            f"`{invite_link}`\n\n"
            "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—é."
        )
        
        buttons = [
            [InlineKeyboardButton(text="üîó –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", url=invite_link)],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
        await state.clear()
        
        logger.info(f"Created new inviter {inviter_name} by admin {message.from_user.id}")
        
    except Exception as e:
        logger.exception(f"Error creating new inviter: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@ui_router.callback_query(F.data == "menu:list_invites")
async def handle_list_invites(callback: CallbackQuery, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    try:
        invites = get_invites()
        
        if not invites:
            text = "üìù **–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫**\n\n–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É!"
            await callback.message.edit_text(text, reply_markup=back_kb(), parse_mode="Markdown")
            await callback.answer()
            return
        
        from datetime import datetime
        current_time = get_almaty_now().strftime("%H:%M")
        text = f"üë• **–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫** (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {current_time})\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
        buttons = []
        for i, invite in enumerate(invites[:15], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 15 —Å—Å—ã–ª–æ–∫
            name = invite['name']
            total = invite.get('total_invited', 0)
            active = invite.get('active_now', 0)
            retention = invite.get('retention_rate', 0)
            invite_id = invite.get('id', i)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–µ
            text += f"**{i}. {name}**\n"
            text += f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {total} | –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active} | –£–¥–µ—Ä–∂–∞–Ω–∏–µ: {retention}%\n"
            text += f"üîó `{invite.get('invite_link', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')}`\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏
            buttons.append([
                InlineKeyboardButton(
                    text=f"üóë –£–¥–∞–ª–∏—Ç—å {name}",
                    callback_data=f"delete:invite:{invite_id}:{name}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons.extend([
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="menu:list_invites")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ])
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
        
    except Exception as e:
        logger.exception(f"Error listing invites: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞", show_alert=True)


@ui_router.callback_query(F.data == "menu:reports")
async def handle_reports_menu(callback: CallbackQuery, **kwargs):
    """–ü–æ–¥–º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    text = (
        "üìä **–û—Ç—á—ë—Ç—ã**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:"
    )
    
    await callback.message.edit_text(text, reply_markup=reports_kb(), parse_mode="Markdown")
    await callback.answer()


@ui_router.callback_query(F.data.startswith("reports:"))
async def handle_reports(callback: CallbackQuery, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    try:
        report_type = callback.data.split(":")[1]
        
        if report_type == "excel":
            # –ü–æ–ª–Ω—ã–π Excel –æ—Ç—á–µ—Ç
            await callback.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é Excel –æ—Ç—á–µ—Ç...")
            
            file_path = export_excel("full")
            if not file_path or not Path(file_path).exists():
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")
                return
            
            document = FSInputFile(Path(file_path), filename=Path(file_path).name)
            await callback.message.answer_document(
                document=document,
                caption=f"üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç Excel\nüïê –°–æ–∑–¥–∞–Ω: {format_datetime_for_report(get_almaty_now())}"
            )
            
        else:
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
            await callback.answer("üìä –ó–∞–≥—Ä—É–∂–∞—é –æ—Ç—á–µ—Ç...")
            
            stats = get_stats(report_type)
            
            period_names = {
                "today": "—Å–µ–≥–æ–¥–Ω—è",
                "week": "–∑–∞ –Ω–µ–¥–µ–ª—é", 
                "month": "–∑–∞ –º–µ—Å—è—Ü"
            }
            
            period_name = period_names.get(report_type, report_type)
            
            text = f"üìä **–û—Ç—á–µ—Ç {period_name}**\n\n"
            text += f"üë• –ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {stats.get('total_subscriptions', 0)}\n"
            text += f"‚ùå –û—Ç–ø–∏—Å–∫–∏: {stats.get('total_unsubscriptions', 0)}\n" 
            text += f"üìà –ß–∏—Å—Ç—ã–π –ø—Ä–∏—Ä–æ—Å—Ç: {stats.get('net_growth', 0)}\n"
            text += f"üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('unique_subscribers', 0)}\n"
            
            await callback.message.answer(text, reply_markup=reports_kb(), parse_mode="Markdown")
        
    except Exception as e:
        logger.exception(f"Error handling report {report_type}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞", show_alert=True)


@ui_router.callback_query(F.data == "menu:rating")
async def handle_rating(callback: CallbackQuery, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª–µ–π."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    try:
        rating_data = get_report_adapter().get_rating()
        
        from datetime import datetime
        current_time = get_almaty_now().strftime("%H:%M")
        text = f"üèÜ **–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª–µ–π** (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {current_time})\n\n"
        
        if not rating_data:
            text += "–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç."
        else:
            for i, data in enumerate(rating_data[:10], 1):  # –¢–æ–ø-10
                name = data.get('inviter_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                total = data.get('total_invited', 0)
                active = data.get('currently_subscribed', 0)
                retention = data.get('retention_percentage', 0)
                
                medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
                text += f"{medal} **{name}**: {total} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ, {active} –∞–∫—Ç–∏–≤–Ω—ã—Ö ({retention}%)\n"
        
        buttons = [
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="menu:rating")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
        
    except Exception as e:
        logger.exception(f"Error showing rating: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞", show_alert=True)


@ui_router.callback_query(F.data == "menu:find_user")
async def handle_find_user_menu(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    text = (
        "üîé **–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ user_id –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    )
    
    await callback.message.edit_text(text, reply_markup=back_kb(), parse_mode="Markdown")
    await state.set_state(UIStates.waiting_user_search)
    await callback.answer()


@ui_router.message(UIStates.waiting_user_search)
async def handle_user_search(message: Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not is_admin(message.from_user.id):
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    try:
        search_query = message.text.strip()
        user_data = find_user(search_query)
        
        if not user_data:
            await message.reply(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{search_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=back_kb()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        text = f"üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**\n\n"
        text += f"**ID:** `{user_data['tg_user_id']}`\n"
        text += f"**Username:** @{user_data.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        text += f"**–ò–º—è:** {user_data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"**–°—Ç–∞—Ç—É—Å:** {user_data.get('current_status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
        text += f"**–ü–æ–¥–ø–∏—Å–æ–∫:** {user_data.get('subscribe_count', 0)}\n"
        text += f"**–û—Ç–ø–∏—Å–æ–∫:** {user_data.get('unsubscribe_count', 0)}\n"
        text += f"**–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {user_data.get('last_activity', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        
        # –ò—Å—Ç–æ—Ä–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–±—ã—Ç–∏–π)
        history = user_data.get('history', [])[:5]
        if history:
            text += "**üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:**\n"
            for event in history:
                event_type = "‚ûï" if event['event_type'] == 'subscribe' else "‚ûñ"
                inviter = f" (–æ—Ç {event['inviter_name']})" if event['inviter_name'] else ""
                text += f"{event_type} {event['event_type']}{inviter} - {event['event_time'][:10]}\n"
        
        buttons = [
            [InlineKeyboardButton(text="üóÇ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏", callback_data=f"export:user:{user_data['tg_user_id']}")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
        await state.clear()
        
    except Exception as e:
        logger.exception(f"Error searching user: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@ui_router.callback_query(F.data.startswith("delete:invite:"))
async def handle_delete_invite_callback(callback: CallbackQuery, **kwargs):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: delete:invite:ID:name
        parts = callback.data.split(":", 3)
        if len(parts) < 4:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        invite_id = parts[2]
        name = parts[3]
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        text = f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ**\n\n"
        text += f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è **{name}**?\n\n"
        text += f"ID: `{invite_id}`\n\n"
        text += "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"
        
        buttons = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                    callback_data=f"confirm:delete:invite:{invite_id}:{name}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="menu:list_invites"
                )
            ]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
        
    except Exception as e:
        logger.exception(f"Error in delete invite callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)


@ui_router.callback_query(F.data.startswith("confirm:delete:invite:"))
async def handle_confirm_delete_invite(callback: CallbackQuery, **kwargs):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: confirm:delete:invite:ID:name
        parts = callback.data.split(":", 4)
        if len(parts) < 5:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        invite_id = parts[3]
        name = parts[4]
        
        # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É
        invite_manager = get_invite_manager()
        success = invite_manager.delete_invite(invite_id)
        
        if success:
            text = f"‚úÖ **–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞**\n\n"
            text += f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è **{name}** (ID: {invite_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞."
            
            await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
            logger.info(f"Admin {callback.from_user.id} deleted invite {invite_id} for {name}")
            
        else:
            text = f"‚ùå **–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
            text += f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è **{name}** (ID: {invite_id}).\n\n"
            text += "–í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
            
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        
        buttons = [
            [InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É —Å—Å—ã–ª–æ–∫", callback_data="menu:list_invites")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.exception(f"Error confirming delete invite: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏", show_alert=True)


@ui_router.callback_query(F.data == "menu:export_excel")
async def handle_export_excel(callback: CallbackQuery, **kwargs):
    """–≠–∫—Å–ø–æ—Ä—Ç Excel —Ñ–∞–π–ª–∞."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    try:
        await callback.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é Excel —Ñ–∞–π–ª...")
        
        file_path = export_excel("full")
        if not file_path or not Path(file_path).exists():
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞")
            return
        
        document = FSInputFile(Path(file_path), filename=Path(file_path).name)
        await callback.message.answer_document(
            document=document,
            caption=f"üìä –ü–æ–ª–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Excel\nüïê –°–æ–∑–¥–∞–Ω: {format_datetime_for_report(get_almaty_now())}"
        )
        
    except Exception as e:
        logger.exception(f"Error exporting excel: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ", show_alert=True)


# === USER MENU HANDLERS (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) ===

@ui_router.callback_query(F.data == "user:my_invited")
async def handle_my_invited(callback: CallbackQuery, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        user_manager = get_user_manager()
        db = get_db()
        
        with db.get_connection() as conn:
            # –ù–∞–π–¥–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è –ø–æ user_id
            cursor = conn.execute(
                "SELECT id, name FROM inviters WHERE name = ? OR invite_link LIKE ?",
                (callback.from_user.username or str(user_id), f"%{user_id}%")
            )
            inviter_row = cursor.fetchone()
            
            if not inviter_row:
                text = "‚ùå **–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª–µ–º**\n\n–í—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫."
                await callback.message.edit_text(text, reply_markup=user_menu_kb(), parse_mode="Markdown")
                await callback.answer()
                return
            
            inviter_id = inviter_row[0]
            inviter_name = inviter_row[1]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö
            cursor = conn.execute(
                """SELECT j.tg_user_id, j.username, j.name, j.event_time, j.status
                   FROM journal j
                   WHERE j.inviter_id = ? AND j.event_type = 'subscribe'
                   ORDER BY j.event_time DESC
                   LIMIT 20""",
                (inviter_id,)
            )
            invited_users = [dict(row) for row in cursor.fetchall()]
        
        from datetime import datetime
        current_time = get_almaty_now().strftime("%H:%M")
        text = f"üì• **–ú–æ–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ ({len(invited_users)})** (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {current_time})\n\n"
        
        if not invited_users:
            text += "–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏."
        else:
            for i, user in enumerate(invited_users[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
                username_display = f"@{user['username']}" if user['username'] else f"ID:{user['tg_user_id']}"
                name_display = user['name'] or '–±–µ–∑ –∏–º–µ–Ω–∏'
                status_emoji = "‚úÖ" if user['status'] == 'subscribed' else "‚ùå"
                date_str = user['event_time'][:10]  # YYYY-MM-DD
                
                text += f"{i}. {status_emoji} {name_display} ({username_display}) - {date_str}\n"
            
            if len(invited_users) > 10:
                text += f"\n... –∏ –µ—â–µ {len(invited_users) - 10} —á–µ–ª–æ–≤–µ–∫"
        
        buttons = [
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="user:my_invited")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
        
    except Exception as e:
        logger.exception(f"Error showing my invited: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@ui_router.callback_query(F.data == "user:my_stats")
async def handle_my_stats(callback: CallbackQuery, **kwargs):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = callback.from_user.id
    
    try:
        db = get_db()
        
        with db.get_connection() as conn:
            # –ù–∞–π–¥–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è
            cursor = conn.execute(
                "SELECT id, name FROM inviters WHERE name = ? OR invite_link LIKE ?",
                (callback.from_user.username or str(user_id), f"%{user_id}%")
            )
            inviter_row = cursor.fetchone()
            
            if not inviter_row:
                text = "‚ùå **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**\n\n–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª–µ–º."
                await callback.message.edit_text(text, reply_markup=user_menu_kb(), parse_mode="Markdown")
                await callback.answer()
                return
            
            inviter_id = inviter_row[0]
            inviter_name = inviter_row[1]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            # –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ
            cursor = conn.execute(
                "SELECT COUNT(*) FROM journal WHERE inviter_id = ? AND event_type = 'subscribe'",
                (inviter_id,)
            )
            total_invited = cursor.fetchone()[0]
            
            # –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–π—á–∞—Å
            cursor = conn.execute(
                """SELECT COUNT(DISTINCT j1.tg_user_id) FROM journal j1 
                   WHERE j1.inviter_id = ? AND j1.event_type = 'subscribe'
                   AND j1.tg_user_id NOT IN (
                       SELECT j2.tg_user_id FROM journal j2 
                       WHERE j2.event_type = 'unsubscribe' AND j2.event_time > j1.event_time
                   )""",
                (inviter_id,)
            )
            active_now = cursor.fetchone()[0]
            
            # –£—à–ª–∏
            left_count = total_invited - active_now
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç —É–¥–µ—Ä–∂–∞–Ω–∏—è
            retention_rate = (active_now / total_invited * 100) if total_invited > 0 else 0
            
            # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            from datetime import datetime, timedelta
            week_ago = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
            cursor = conn.execute(
                "SELECT COUNT(*) FROM journal WHERE inviter_id = ? AND event_type = 'subscribe' AND event_time >= ?",
                (inviter_id, week_ago)
            )
            week_invited = cursor.fetchone()[0]
        
        from datetime import datetime
        current_time = get_almaty_now().strftime("%H:%M")
        text = f"üèÜ **–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** (–æ–±–Ω–æ–≤–ª–µ–Ω–æ {current_time})\n\n"
        text += f"üë§ **–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å:** {inviter_name}\n\n"
        text += f"üìä **–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ:** {total_invited}\n"
        text += f"‚úÖ **–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–π—á–∞—Å:** {active_now}\n"
        text += f"‚ùå **–£—à–ª–∏:** {left_count}\n"
        text += f"üìà **% —É–¥–µ—Ä–∂–∞–Ω–∏—è:** {retention_rate:.1f}%\n\n"
        text += f"üìÖ **–ó–∞ –Ω–µ–¥–µ–ª—é:** +{week_invited} –Ω–æ–≤—ã—Ö\n"
        
        # –û—Ü–µ–Ω–∫–∞
        if retention_rate >= 80:
            text += "\nü•á **–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!** –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É–¥–µ—Ä–∂–∞–Ω–∏—è!"
        elif retention_rate >= 60:
            text += "\nü•à **–•–æ—Ä–æ—à–æ!** –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."
        elif retention_rate >= 40:
            text += "\nü•â **–ù–µ–ø–ª–æ—Ö–æ!** –ï—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è."
        else:
            text += "\nüìà **–ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª!** –†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ –∫–∞—á–µ—Å—Ç–≤–æ–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏."
        
        buttons = [
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="user:my_stats")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
        
    except Exception as e:
        logger.exception(f"Error showing my stats: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@ui_router.callback_query(F.data == "user:my_excel")
async def handle_my_excel(callback: CallbackQuery, **kwargs):
    """–°–∫–∞—á–∞—Ç—å Excel —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = callback.from_user.id
    
    try:
        await callback.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à –æ—Ç—á–µ—Ç...")
        
        db = get_db()
        
        with db.get_connection() as conn:
            # –ù–∞–π–¥–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è
            cursor = conn.execute(
                "SELECT id, name FROM inviters WHERE name = ? OR invite_link LIKE ?",
                (callback.from_user.username or str(user_id), f"%{user_id}%")
            )
            inviter_row = cursor.fetchone()
            
            if not inviter_row:
                await callback.message.answer(
                    "‚ùå **Excel –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª–µ–º.",
                    reply_markup=user_menu_kb(),
                    parse_mode="Markdown"
                )
                return
            
            inviter_id = inviter_row[0]
            inviter_name = inviter_row[1]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor = conn.execute(
                """SELECT j.event_time, j.event_type, j.tg_user_id, j.username, j.name, j.status, j.note
                   FROM journal j
                   WHERE j.inviter_id = ?
                   ORDER BY j.event_time DESC""",
                (inviter_id,)
            )
            user_data = [dict(row) for row in cursor.fetchall()]
        
        if not user_data:
            await callback.message.answer(
                "‚ùå **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞**\n\n–í—ã –µ—â–µ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏.",
                reply_markup=user_menu_kb(),
                parse_mode="Markdown"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        import pandas as pd
        from pathlib import Path
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        reports_dir = Path("reports/user_exports")
        reports_dir.mkdir(parents=True, exist_ok=True)
        
        filename = f"my_data_{inviter_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        file_path = reports_dir / filename
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
        df = pd.DataFrame(user_data)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        df.columns = ['–î–∞—Ç–∞/–≤—Ä–µ–º—è', '–î–µ–π—Å—Ç–≤–∏–µ', 'User ID', 'Username', '–ò–º—è', '–°—Ç–∞—Ç—É—Å', '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–ú–æ–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ', index=False)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        document = FSInputFile(file_path, filename=filename)
        await callback.message.answer_document(
            document=document,
            caption=f"üìä **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ**\nüë§ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å: {inviter_name}\nüìÖ –≠–∫—Å–ø–æ—Ä—Ç: {format_datetime_for_report(get_almaty_now())}"
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        file_path.unlink(missing_ok=True)
        
    except Exception as e:
        logger.exception(f"Error generating user excel: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞", show_alert=True)


@ui_router.callback_query(F.data == "download:unified_excel")
async def handle_download_unified_excel(callback: CallbackQuery, **kwargs):
    """–°–∫–∞—á–∞—Ç—å unified Excel —Ñ–∞–π–ª (subscribers_report.xlsx)."""
    try:
        # Initialize unified report manager
        db = get_db()
        unified_manager = UnifiedReportManager(db)
        
        # Get Excel file path
        file_path = unified_manager.export_excel_file()
        
        if not Path(file_path).exists():
            await callback.answer("‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Send file
        document = FSInputFile(file_path, filename="subscribers_report.xlsx")
        await callback.message.answer_document(
            document=document,
            caption="üìä **–û—Ç—á—ë—Ç subscribers_report.xlsx**\n\n–°–æ–¥–µ—Ä–∂–∏—Ç:\n‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è ‚Äî –≤—Å–µ —Å–æ–±—ã—Ç–∏—è\n‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî —Å–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è–º\n‚Ä¢ –î–Ω–µ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã",
            parse_mode="Markdown"
        )
        
        await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.exception(f"Error downloading unified Excel: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞", show_alert=True)


@ui_router.callback_query(F.data == "menu:back")
async def handle_back_to_main(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    if is_admin(callback.from_user.id):
        text = "üîê **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = main_admin_kb()
    else:
        text = "üìä **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = user_menu_kb()
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


# === ERROR HANDLER ===

@ui_router.callback_query()
async def handle_unknown_callback(callback: CallbackQuery, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback'–æ–≤."""
    logger.warning(f"Unknown callback: {callback.data} from user {callback.from_user.id}")
    await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)
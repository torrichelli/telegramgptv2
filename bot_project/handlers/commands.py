#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞–º–∏.

–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
- /start, /help - —Å–ø—Ä–∞–≤–∫–∞
- /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥  
- /report - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é
- /export - –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
- /schedule - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
- /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
"""

import logging
import os
from datetime import datetime, timedelta
from typing import Optional, List
import json

from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from pathlib import Path

from db.db import get_db
from reports.report_manager import ReportManager
from reports.scheduler import ReportScheduler
from utils.time_utils import get_almaty_now, format_datetime_for_report
from utils.logging_conf import get_logger

logger = get_logger(__name__)

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
commands_router = Router(name="commands")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç—á—ë—Ç–æ–≤
report_scheduler: Optional[ReportScheduler] = None


def initialize_scheduler(bot) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç—á—ë—Ç–æ–≤."""
    global report_scheduler
    
    try:
        db = get_db()
        report_scheduler = ReportScheduler(bot, db)
        logger.info("üïí [Commands] ReportScheduler initialized successfully")
    except Exception as e:
        logger.exception(f"‚ùå [Commands] Failed to initialize ReportScheduler: {e}")


def get_scheduler() -> Optional[ReportScheduler]:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    return report_scheduler

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–ª–∂–µ–Ω –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
ADMIN_IDS: List[int] = []  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏


def initialize_admin_ids() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    global ADMIN_IDS
    
    admin_ids_str = os.environ.get('ADMIN_IDS', '')
    if not admin_ids_str:
        logger.warning("‚ö†Ô∏è [Commands] ADMIN_IDS environment variable not set - no administrators configured")
        return
    
    try:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: "123456789,987654321" –∏–ª–∏ "123456789, 987654321"
        admin_ids = [int(id_str.strip()) for id_str in admin_ids_str.split(',') if id_str.strip()]
        ADMIN_IDS.clear()
        ADMIN_IDS.extend(admin_ids)
        
        logger.info(f"‚úÖ [Commands] Initialized {len(ADMIN_IDS)} administrators: {ADMIN_IDS}")
        
    except ValueError as e:
        logger.error(f"‚ùå [Commands] Invalid ADMIN_IDS format in environment variable: {admin_ids_str} - {e}")
    except Exception as e:
        logger.exception(f"‚ùå [Commands] Error initializing admin IDs: {e}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º admin IDs –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
initialize_admin_ids()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
class ReportStates(StatesGroup):
    waiting_for_period = State()
    waiting_for_date_range = State()
    waiting_for_schedule_time = State()
    waiting_for_chat_id = State()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id in ADMIN_IDS


def admin_only(handler):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    async def wrapper(message: Message, *args, **kwargs):
        if not is_admin(message.from_user.id):
            await message.reply(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.\n"
                "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
            )
            return
        return await handler(message, *args, **kwargs)
    return wrapper


@commands_router.message(CommandStart())
async def handle_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = message.from_user
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

ü§ñ –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ Telegram —á–∞—Ç–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö.

üìä **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–∞—Ö
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç—ã –≤ Excel
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/help - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
/stats - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

üîí **–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**
/report - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤
/export - —ç–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
/schedule - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º

–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≤–∞—à–∏ —á–∞—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã —è –º–æ–≥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!
    """
    
    await message.reply(welcome_text, parse_mode="Markdown")
    
    logger.info(f"üëã [Commands] Start command from user {user.id} (@{user.username})")


@commands_router.message(Command("help"))
async def handle_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = """
üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

üë§ **–î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**
/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/stats [–ø–µ—Ä–∏–æ–¥] - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
/status - —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã

üîß **–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**
/report [—Ç–∏–ø] [–¥–∞—Ç–∞] - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤
  ‚Ä¢ daily YYYY-MM-DD - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç
  ‚Ä¢ weekly YYYY-MM-DD - –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç  
  ‚Ä¢ monthly YYYY-MM-DD - –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç
  ‚Ä¢ retention [–¥–Ω–∏] [–¥–∞—Ç–∞] - –∞–Ω–∞–ª–∏–∑ —É–¥–µ—Ä–∂–∞–Ω–∏—è

/export - –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ Excel

/schedule - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏:
  ‚Ä¢ config - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –∏ —á–∞—Ç—ã
  ‚Ä¢ status - —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
  ‚Ä¢ test [—Ç–∏–ø] - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
  ‚Ä¢ enable/disable - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å

**–ü—Ä–∏–º–µ—Ä—ã:**
`/stats today` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
`/report daily 2024-01-15` - –æ—Ç—á—ë—Ç –∑–∞ 15 —è–Ω–≤–∞—Ä—è
`/schedule config 09:00` - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ 9:00
    """
    
    await message.reply(help_text, parse_mode="Markdown")


@commands_router.message(Command("stats"))
async def handle_stats(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()[1:] if len(message.text.split()) > 1 else ["today"]
        period = args[0].lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        now = get_almaty_now()
        
        if period == "today":
            start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
            end_date = now
            period_name = "—Å–µ–≥–æ–¥–Ω—è"
        elif period == "yesterday":
            yesterday = now - timedelta(days=1)
            start_date = yesterday.replace(hour=0, minute=0, second=0, microsecond=0)
            end_date = yesterday.replace(hour=23, minute=59, second=59, microsecond=999999)
            period_name = "–≤—á–µ—Ä–∞"
        elif period == "week":
            week_start = now - timedelta(days=now.weekday())
            start_date = week_start.replace(hour=0, minute=0, second=0, microsecond=0)
            end_date = now
            period_name = "–∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é"
        elif period == "month":
            month_start = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
            start_date = month_start
            end_date = now
            period_name = "–∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü"
        else:
            await message.reply(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: today, yesterday, week, month"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = get_db()
        events = db.get_events_for_period(
            start_date.strftime("%Y-%m-%d %H:%M:%S"),
            end_date.strftime("%Y-%m-%d %H:%M:%S")
        )
        
        if not events:
            await message.reply(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {period_name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
        stats = _analyze_events(events)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {period_name}:**

üìà **–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {stats['total_events']}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['unique_users']}
‚Ä¢ –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —á–∞—Ç–æ–≤: {stats['unique_chats']}

üì¢ **–ö–∞–Ω–∞–ª—ã:**
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∏: {stats['channel_subscribes']}
‚Ä¢ –û—Ç–ø–∏—Å–∫–∏: {stats['channel_unsubscribes']}
‚Ä¢ –ß–∏—Å—Ç—ã–π –ø—Ä–∏—Ä–æ—Å—Ç: {stats['channel_net_growth']}

üë• **–ì—Ä—É–ø–ø—ã:**  
‚Ä¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {stats['group_joins']}
‚Ä¢ –í—ã—Ö–æ–¥—ã: {stats['group_leaves']}
‚Ä¢ –ß–∏—Å—Ç—ã–π –ø—Ä–∏—Ä–æ—Å—Ç: {stats['group_net_growth']}

ü§ñ **–ë–æ—Ç:**
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç–æ–≤: {stats['bot_added']}
‚Ä¢ –£–¥–∞–ª—ë–Ω –∏–∑ —á–∞—Ç–æ–≤: {stats['bot_removed']}

‚è∞ **–ü–µ—Ä–∏–æ–¥:** {format_datetime_for_report(start_date)} - {format_datetime_for_report(end_date)}
        """
        
        await message.reply(stats_text, parse_mode="Markdown")
        
        logger.info(f"üìä [Commands] Stats request from user {message.from_user.id} for period {period}")
        
    except Exception as e:
        logger.exception(f"‚ùå [Commands] Error handling stats command: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@commands_router.message(Command("status"))
async def handle_status(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã."""
    try:
        db = get_db()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        try:
            db.get_user_stats_summary()
            db_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞"
        except Exception as e:
            db_status = f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}..."
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        now = get_almaty_now()
        today_start = now.replace(hour=0, minute=0, second=0, microsecond=0)
        
        try:
            today_events = db.get_events_for_period(
                today_start.strftime("%Y-%m-%d %H:%M:%S"),
                now.strftime("%Y-%m-%d %H:%M:%S")
            )
            events_today = len(today_events) if today_events else 0
        except:
            events_today = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler = get_scheduler()
        if scheduler:
            config = scheduler.config
            if scheduler.running and config.enabled:
                scheduler_status = f"‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç (–≤—Ä–µ–º—è: {config.report_time.strftime('%H:%M')}, —á–∞—Ç–æ–≤: {len(config.target_chats)})"
            elif config.enabled:
                scheduler_status = "‚ö†Ô∏è –í–∫–ª—é—á—ë–Ω, –Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω"
            else:
                scheduler_status = "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
        else:
            scheduler_status = "‚ùå –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        
        status_text = f"""
üîß **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**

üíæ **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:** {db_status}
üìä **–°–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è:** {events_today}
‚è∞ **–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:** {scheduler_status}

‚è∞ **–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:** {format_datetime_for_report(now)}
üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** –ú–æ—Å–∫–≤–∞ (UTC+3)

üí° **–í–µ—Ä—Å–∏—è:** 1.0.0
ü§ñ **–ë–æ—Ç ID:** {message.bot.id}
        """
        
        await message.reply(status_text, parse_mode="Markdown")
        
        logger.info(f"üîß [Commands] Status request from user {message.from_user.id}")
        
    except Exception as e:
        logger.exception(f"‚ùå [Commands] Error handling status command: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã.")


@commands_router.message(Command("report"))
@admin_only
async def handle_report(message: Message, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤."""
    try:
        args = message.text.split()[1:]
        
        if not args:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π", callback_data="report_daily"),
                    InlineKeyboardButton(text="üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π", callback_data="report_weekly")
                ],
                [
                    InlineKeyboardButton(text="üìà –ú–µ—Å—è—á–Ω—ã–π", callback_data="report_monthly"),
                    InlineKeyboardButton(text="üîÑ –£–¥–µ—Ä–∂–∞–Ω–∏–µ", callback_data="report_retention")
                ]
            ])
            
            await message.reply(
                "üìã **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "`/report [—Ç–∏–ø] [–¥–∞—Ç–∞]`\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ `/report daily 2024-01-15`\n"
                "‚Ä¢ `/report weekly 2024-01-08`\n"
                "‚Ä¢ `/report monthly 2024-01-01`\n"
                "‚Ä¢ `/report retention 7 2024-01-15`",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            return
        
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        report_type = args[0].lower()
        
        if report_type not in ["daily", "weekly", "monthly", "retention"]:
            await message.reply(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á—ë—Ç–∞. –î–æ—Å—Ç—É–ø–Ω—ã: daily, weekly, monthly, retention"
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É
        target_date = None
        retention_days = 7
        
        if len(args) > 1:
            if report_type == "retention" and len(args) > 2:
                try:
                    retention_days = int(args[1])
                    target_date = args[2]
                except ValueError:
                    await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /report retention [–¥–Ω–∏] [–¥–∞—Ç–∞]")
                    return
            else:
                target_date = args[1]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        await _generate_and_send_report(message, report_type, target_date, retention_days)
        
    except Exception as e:
        logger.exception(f"‚ùå [Commands] Error handling report command: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@commands_router.message(Command("export"))
@admin_only
async def handle_export(message: Message, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ë–î."""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
        status_msg = await message.reply("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞—ë–º —ç–∫—Å–ø–æ—Ä—Ç
        db = get_db()
        report_manager = ReportManager(db)
        file_path = report_manager.export_full_database()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        file_path_obj = Path(file_path)
        if not file_path_obj.exists():
            await message.reply("‚ùå –§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        document = FSInputFile(file_path_obj, filename=file_path_obj.name)
        await message.bot.send_document(
            chat_id=message.chat.id,
            document=document,
            caption=f"üìÅ –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
                   f"üïê –°–æ–∑–¥–∞–Ω: {format_datetime_for_report(get_almaty_now())}"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        await status_msg.delete()
        
        logger.info(f"üìÅ [Commands] Database export sent to user {message.from_user.id}")
        
    except Exception as e:
        logger.exception(f"‚ùå [Commands] Error handling export command: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@commands_router.message(Command("schedule"))
@admin_only  
async def handle_schedule(message: Message, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º."""
    try:
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []
        
        if not args:
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ
            help_text = """
‚è∞ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –æ—Ç—á—ë—Ç–æ–≤**

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/schedule status` - —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
‚Ä¢ `/schedule config [–≤—Ä–µ–º—è] [—á–∞—Ç—ã]` - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ `/schedule enable` - –≤–∫–ª—é—á–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
‚Ä¢ `/schedule disable` - –≤—ã–∫–ª—é—á–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
‚Ä¢ `/schedule test [—Ç–∏–ø]` - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `/schedule config 09:00` - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ 9:00
‚Ä¢ `/schedule test daily` - —Ç–µ—Å—Ç–æ–≤—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç
            """
            await message.reply(help_text, parse_mode="Markdown")
            return
        
        command = args[0].lower()
        
        if command == "status":
            await _handle_schedule_status(message)
        elif command == "config":
            await _handle_schedule_config(message, args[1:] if len(args) > 1 else [])
        elif command == "enable":
            await _handle_schedule_enable(message)
        elif command == "disable":
            await _handle_schedule_disable(message)
        elif command == "test":
            report_type = args[1] if len(args) > 1 else "daily"
            await _handle_schedule_test(message, report_type)
        else:
            await message.reply(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/schedule` –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.exception(f"‚ùå [Commands] Error handling schedule command: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")


@commands_router.callback_query(F.data.startswith("report_"))
async def handle_report_callback(callback: CallbackQuery, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç—á—ë—Ç–æ–≤."""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    
    try:
        report_type = callback.data.split("_")[1]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç —Å –¥–∞—Ç–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await _generate_and_send_report(callback.message, report_type)
        
        await callback.answer("‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á—ë—Ç...")
        
    except Exception as e:
        logger.exception(f"‚ùå [Commands] Error handling report callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞", show_alert=True)


async def _generate_and_send_report(message: Message, report_type: str, 
                                  target_date: Optional[str] = None,
                                  retention_days: int = 7):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        report_type: –¢–∏–ø –æ—Ç—á—ë—Ç–∞ (daily, weekly, monthly, retention)
        target_date: –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
        retention_days: –î–Ω–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è
    """
    status_msg = None
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        status_msg = await message.reply(f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é {report_type} –æ—Ç—á—ë—Ç...")
        
        # –°–æ–∑–¥–∞—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç—á—ë—Ç–æ–≤
        db = get_db()
        report_manager = ReportManager(db)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
        if not target_date:
            now = get_almaty_now()
            if report_type == "daily":
                yesterday = now - timedelta(days=1)
                target_date = yesterday.strftime("%Y-%m-%d")
            elif report_type == "weekly":
                days_since_monday = now.weekday()
                last_monday = now - timedelta(days=days_since_monday + 7)
                target_date = last_monday.strftime("%Y-%m-%d")
            elif report_type == "monthly":
                if now.month == 1:
                    last_month = now.replace(year=now.year - 1, month=12, day=1)
                else:
                    last_month = now.replace(month=now.month - 1, day=1)
                target_date = last_month.strftime("%Y-%m-%d")
            else:  # retention
                yesterday = now - timedelta(days=1)
                target_date = yesterday.strftime("%Y-%m-%d")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        file_path = None
        caption = None
        
        if report_type == "daily":
            result = report_manager.generate_daily_report(target_date)
            file_path = result.get('excel_file')
            caption = f"üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ {target_date}"
        elif report_type == "weekly":
            result = report_manager.generate_weekly_report(target_date)
            file_path = result.get('excel_file')
            caption = f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å {target_date}"
        elif report_type == "monthly":
            result = report_manager.generate_monthly_report(target_date)
            file_path = result.get('excel_file')
            caption = f"üìà –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç —Å {target_date}"
        elif report_type == "retention":
            result = report_manager.generate_retention_report(retention_days, target_date)
            file_path = result.get('excel_file')
            caption = f"üîÑ –ê–Ω–∞–ª–∏–∑ —É–¥–µ—Ä–∂–∞–Ω–∏—è ({retention_days} –¥–Ω–µ–π) –∑–∞ {target_date}"
        else:
            await status_msg.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á—ë—Ç–∞")
            return
        
        if not file_path:
            await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        file_path_obj = Path(str(file_path))
        if not file_path_obj.exists():
            await status_msg.edit_text("‚ùå –§–∞–π–ª –æ—Ç—á—ë—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        document = FSInputFile(file_path_obj, filename=file_path_obj.name)
        await message.bot.send_document(
            chat_id=message.chat.id,
            document=document,
            caption=f"{caption}\nüïê –°–æ–∑–¥–∞–Ω: {format_datetime_for_report(get_almaty_now())}"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        await status_msg.delete()
        
        logger.info(f"üìã [Commands] {report_type.title()} report sent to user {message.from_user.id}")
        
    except Exception as e:
        logger.exception(f"‚ùå [Commands] Error generating {report_type} report: {e}")
        if status_msg:
            try:
                await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {report_type} –æ—Ç—á—ë—Ç–∞")
            except Exception:
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {report_type} –æ—Ç—á—ë—Ç–∞")
        else:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {report_type} –æ—Ç—á—ë—Ç–∞")


def _analyze_events(events: List[dict]) -> dict:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    
    Args:
        events: –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ –ë–î
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    stats = {
        'total_events': len(events),
        'unique_users': len(set(event['user_id'] for event in events)),
        'unique_chats': len(set(event['chat_id'] for event in events)),
        'channel_subscribes': 0,
        'channel_unsubscribes': 0,
        'group_joins': 0,
        'group_leaves': 0,
        'bot_added': 0,
        'bot_removed': 0,
    }
    
    for event in events:
        event_type = event['event_type']
        
        if event_type == 'channel_subscribe':
            stats['channel_subscribes'] += 1
        elif event_type == 'channel_unsubscribe':
            stats['channel_unsubscribes'] += 1
        elif event_type == 'group_join':
            stats['group_joins'] += 1
        elif event_type == 'group_leave':
            stats['group_leaves'] += 1
        elif event_type == 'bot_added':
            stats['bot_added'] += 1
        elif event_type == 'bot_removed':
            stats['bot_removed'] += 1
    
    # –í—ã—á–∏—Å–ª—è–µ–º —á–∏—Å—Ç—ã–π –ø—Ä–∏—Ä–æ—Å—Ç
    stats['channel_net_growth'] = stats['channel_subscribes'] - stats['channel_unsubscribes']
    stats['group_net_growth'] = stats['group_joins'] - stats['group_leaves']
    
    return stats


def configure_admin_ids(admin_ids: List[int]):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    global ADMIN_IDS
    ADMIN_IDS = admin_ids
    logger.info(f"üîß [Commands] Configured {len(admin_ids)} admin IDs")


async def _handle_schedule_status(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /schedule status."""
    scheduler = get_scheduler()
    
    if not scheduler:
        await message.reply("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    config = scheduler.config
    status_text = f"""
üïí **–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç—á—ë—Ç–æ–≤:**

üìä **–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {'‚úÖ –í–∫–ª—é—á—ë–Ω' if config.enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}
‚è∞ **–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:** {config.report_time.strftime('%H:%M')} (–ú–°–ö)
üì® **–¶–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã:** {len(config.target_chats)} —à—Ç.
üìã **–¢–∏–ø—ã –æ—Ç—á—ë—Ç–æ–≤:** {', '.join(config.report_types)}
üîÑ **–ó–∞–ø—É—â–µ–Ω:** {'‚úÖ –î–∞' if scheduler.running else '‚ùå –ù–µ—Ç'}

üí° **–ß–∞—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:**
{chr(10).join([f'‚Ä¢ {chat_id}' for chat_id in config.target_chats]) if config.target_chats else '‚Ä¢ –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'}
    """
    
    await message.reply(status_text, parse_mode="Markdown")


async def _handle_schedule_config(message: Message, args: List[str]) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /schedule config."""
    scheduler = get_scheduler()
    
    if not scheduler:
        await message.reply("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    try:
        if not args:
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = scheduler.config
            config_text = f"""
‚öôÔ∏è **–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**

‚è∞ **–í—Ä–µ–º—è:** {config.report_time.strftime('%H:%M')} (–ú–°–ö)
üì® **–ß–∞—Ç—ã:** {', '.join(map(str, config.target_chats)) if config.target_chats else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'}
üìã **–¢–∏–ø—ã:** {', '.join(config.report_types)}

**–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:**
`/schedule config [–≤—Ä–µ–º—è] [chat_id1,chat_id2,...]`
            """
            await message.reply(config_text, parse_mode="Markdown")
            return
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        time_str = args[0]
        try:
            from datetime import time
            hour, minute = map(int, time_str.split(':'))
            report_time = time(hour, minute)
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)")
            return
        
        # –ü–∞—Ä—Å–∏–º —á–∞—Ç—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
        target_chats = []
        if len(args) > 1:
            try:
                chat_ids_str = args[1]
                target_chats = [int(chat_id.strip()) for chat_id in chat_ids_str.split(',') if chat_id.strip()]
            except ValueError:
                await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
                return
        else:
            # –ï—Å–ª–∏ —á–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            target_chats = [message.chat.id]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        await scheduler.configure(
            report_time=report_time,
            target_chats=target_chats
        )
        
        await message.reply(
            f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:\n"
            f"‚è∞ –í—Ä–µ–º—è: {report_time.strftime('%H:%M')} (–ú–°–ö)\n"
            f"üì® –ß–∞—Ç—ã: {', '.join(map(str, target_chats))}",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.exception(f"‚ùå [Commands] Error configuring scheduler: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")


async def _handle_schedule_enable(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /schedule enable."""
    scheduler = get_scheduler()
    
    if not scheduler:
        await message.reply("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    try:
        await scheduler.configure(enabled=True)
        await scheduler.start()
        await message.reply("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤–∫–ª—é—á—ë–Ω")
        
    except Exception as e:
        logger.exception(f"‚ùå [Commands] Error enabling scheduler: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")


async def _handle_schedule_disable(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /schedule disable."""
    scheduler = get_scheduler()
    
    if not scheduler:
        await message.reply("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    try:
        await scheduler.configure(enabled=False)
        await scheduler.stop()
        await message.reply("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤—ã–∫–ª—é—á—ë–Ω")
        
    except Exception as e:
        logger.exception(f"‚ùå [Commands] Error disabling scheduler: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")


async def _handle_schedule_test(message: Message, report_type: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /schedule test."""
    scheduler = get_scheduler()
    
    if not scheduler:
        await message.reply("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    if report_type not in ["daily", "weekly", "monthly"]:
        await message.reply("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á—ë—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: daily, weekly, monthly")
        return
    
    try:
        status_msg = await message.reply(f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç–æ–≤—ã–π {report_type} –æ—Ç—á—ë—Ç...")
        
        success = await scheduler.send_test_report(message.chat.id, report_type)
        
        if success:
            await status_msg.edit_text(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π {report_type} –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ {report_type} –æ—Ç—á—ë—Ç–∞")
            
    except Exception as e:
        logger.exception(f"‚ùå [Commands] Error sending test report: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ {report_type} –æ—Ç—á—ë—Ç–∞")


@commands_router.message(Command("create_test_data"))
@admin_only
async def handle_create_test_data(message: Message):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Excel –æ—Ç—á–µ—Ç–∞."""
    try:
        db = get_db()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª–µ–π —Å username —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        vadim_id = db.upsert_inviter(name="Vadim", username="@vadim")
        anel_id = db.upsert_inviter(name="Anel", username="@anel") 
        petr_id = db.upsert_inviter(name="Petr", username="@petr")
        
        # –°–æ–±—ã—Ç–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
        test_events = [
            # Alex –ø–æ–¥–ø–∏—Å–∞–ª—Å—è —á–µ—Ä–µ–∑ Vadim, –ø–æ—Ç–æ–º –æ—Ç–ø–∏—Å–∞–ª—Å—è
            {'event_type': 'subscribe', 'tg_user_id': 1234567, 'username': '@alex', 'name': 'Alex Ivanov', 'inviter_id': vadim_id, 'status': 'subscribed'},
            {'event_type': 'unsubscribe', 'tg_user_id': 1234567, 'username': '@alex', 'name': 'Alex Ivanov', 'inviter_id': vadim_id, 'status': 'left'},
            
            # Maria –ø–æ–¥–ø–∏—Å–∞–ª–∞—Å—å —á–µ—Ä–µ–∑ Anel –∏ –æ—Å—Ç–∞–ª–∞—Å—å  
            {'event_type': 'subscribe', 'tg_user_id': 7654321, 'username': '@masha', 'name': 'Maria Petrova', 'inviter_id': anel_id, 'status': 'subscribed'},
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            {'event_type': 'subscribe', 'tg_user_id': 1111111, 'username': '@ivan', 'name': 'Ivan Petrov', 'inviter_id': vadim_id, 'status': 'subscribed'},
            {'event_type': 'subscribe', 'tg_user_id': 2222222, 'username': '@elena', 'name': 'Elena Sidorova', 'inviter_id': petr_id, 'status': 'subscribed'},
            {'event_type': 'subscribe', 'tg_user_id': 3333333, 'username': '@dmitry', 'name': 'Dmitry Volkov', 'inviter_id': anel_id, 'status': 'subscribed'},
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –∂—É—Ä–Ω–∞–ª
        for event in test_events:
            db.insert_journal_event(
                event_type=event['event_type'],
                tg_user_id=event['tg_user_id'],
                username=event['username'],
                name=event['name'],
                inviter_id=event['inviter_id'],
                status=event['status']
            )
        
        await message.answer(
            f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!\n\n"
            f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ:\n"
            f"‚Ä¢ 3 –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è —Å username (@vadim, @anel, @petr)\n" 
            f"‚Ä¢ {len(test_events)} —Å–æ–±—ã—Ç–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unified_report –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel –æ—Ç—á–µ—Ç–∞"
        )
        
    except Exception as e:
        logger.exception(f"Error creating test data: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


@commands_router.message(Command("unified_report"))
@admin_only
async def handle_unified_report(message: Message):
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å unified Excel –æ—Ç—á–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó."""
    try:
        from reports.unified_report_manager import UnifiedReportManager
        db = get_db()
        unified_manager = UnifiedReportManager(db)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Excel —Ñ–∞–π–ª–µ
        stats = unified_manager.get_stats_summary()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è–º:**\n\n"
        
        if stats['inviters_data']:
            for inviter_data in stats['inviters_data']:
                stats_text += f"**{inviter_data['inviter_name']}:**\n"
                stats_text += f"  ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {inviter_data['total_invited']}\n"
                stats_text += f"  ‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–Ω—ã —Å–µ–π—á–∞—Å: {inviter_data['currently_subscribed']}\n" 
                stats_text += f"  ‚Ä¢ –û—Ç–ø–∏—Å–∞–ª–∏—Å—å: {inviter_data['unsubscribed']}\n"
                retention = 0
                if inviter_data['total_invited'] > 0:
                    retention = round((inviter_data['currently_subscribed'] / inviter_data['total_invited']) * 100)
                stats_text += f"  ‚Ä¢ % —É–¥–µ—Ä–∂–∞–Ω–∏—è: {retention}%\n\n"
        else:
            stats_text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
        excel_path = unified_manager.export_excel_file()
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –°–∫–∞—á–∞—Ç—å Excel-—Ñ–∞–π–ª", callback_data="download_unified_excel")]
        ])
        
        await message.answer(stats_text, parse_mode="Markdown")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        if Path(excel_path).exists():
            document = FSInputFile(excel_path, filename="subscribers_report.xlsx")
            await message.answer_document(
                document=document,
                caption="üìÇ **subscribers_report.xlsx** - Unified –æ—Ç—á–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó\n\n"
                       "**–°–æ–¥–µ—Ä–∂–∏—Ç:**\n"
                       "‚Ä¢ –õ–∏—Å—Ç **–ò—Å—Ç–æ—Ä–∏—è** - –ø–æ–ª–Ω—ã–π –∂—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π\n" 
                       "‚Ä¢ –õ–∏—Å—Ç **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - —Å–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è–º\n"
                       "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ª–∏—Å—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì",
                parse_mode="Markdown"
            )
        else:
            await message.answer("‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        logger.exception(f"Error generating unified report: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ unified –æ—Ç—á–µ—Ç–∞: {str(e)}")


# ===== –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–°–´–õ–ö–ê–ú–ò =====

@commands_router.message(Command("create_link"))
@admin_only
async def handle_create_link(message: Message):
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()[1:] if message.text else []
        if not args:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏.\n\n"
                "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/create_link username`\n"
                "üìù **–ü—Ä–∏–º–µ—Ä:** `/create_link @vadim`\n\n"
                "‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç TARGET_CHATS –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤",
                parse_mode="Markdown"
            )
            return
        
        username = args[0].strip()
        if not username.startswith('@'):
            username = f'@{username}'
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        from utils.adapter import get_invite_manager
        
        invite_manager = get_invite_manager()
        if not invite_manager:
            await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ bot instance –¥–æ—Å—Ç—É–ø–µ–Ω
        if not invite_manager.bot:
            invite_manager.bot = message.bot
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É
        invite_link = await invite_manager.create_invite_for(username)
        
        await message.answer(
            f"‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}!\n\n"
            f"üîó **–°—Å—ã–ª–∫–∞:** `{invite_link}`\n\n"
            f"üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_links —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.exception(f"Error creating invite link: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {str(e)}")


@commands_router.message(Command("delete_link"))
@admin_only
async def handle_delete_link(message: Message):
    """–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É."""
    try:
        args = message.text.split()[1:] if message.text else []
        if not args:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Å—Å—ã–ª–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n\n"
                "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/delete_link ID`\n"
                "üìù **–ü—Ä–∏–º–µ—Ä:** `/delete_link 1`\n\n"
                "üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/list_links` —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ ID —Å—Å—ã–ª–æ–∫",
                parse_mode="Markdown"
            )
            return
        
        try:
            link_id = int(args[0])
        except ValueError:
            await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        from utils.adapter import get_invite_manager
        
        invite_manager = get_invite_manager()
        if not invite_manager:
            await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        link_info = invite_manager.get_invite_info(link_id)
        if not link_info:
            await message.answer("‚ùå –°—Å—ã–ª–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É
        success = invite_manager.delete_invite(link_id)
        
        if success:
            await message.answer(
                f"‚úÖ –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {link_info['name']}\n"
                f"üîó –°—Å—ã–ª–∫–∞: `{link_info['invite_link']}`",
                parse_mode="Markdown"
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É")
            
    except Exception as e:
        logger.exception(f"Error deleting invite link: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {str(e)}")


@commands_router.message(Command("list_links"))
@admin_only
async def handle_list_links(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏."""
    try:
        from utils.adapter import get_invite_manager
        
        invite_manager = get_invite_manager()
        if not invite_manager:
            await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏
        invites = invite_manager.get_invites()
        
        if not invites:
            await message.answer(
                "üìù **–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/create_link username` –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏",
                parse_mode="Markdown"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = "üìã **–í—Å–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏:**\n\n"
        
        for invite in invites:
            response += f"**ID {invite['id']}** - {invite['name']}\n"
            response += f"üîó `{invite['invite_link']}`\n"
            response += f"üìä –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {invite.get('total_invited', 0)}, "
            response += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {invite.get('active_now', 0)}\n\n"
        
        response += "üí° **–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏:**\n"
        response += "‚Ä¢ `/create_link @username` - —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        response += "‚Ä¢ `/delete_link ID` - —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ ID\n" 
        response += "‚Ä¢ `/list_links` - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Å ID –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"
        
        await message.answer(response, parse_mode="Markdown")
        
    except Exception as e:
        logger.exception(f"Error listing invite links: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫: {str(e)}")


# –≠–∫—Å–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
__all__ = ['commands_router', 'configure_admin_ids', 'initialize_scheduler']
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —á–∞—Ç–∞—Ö.

–§—É–Ω–∫—Ü–∏–∏:
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –∏ –∫–æ–º–∞–Ω–¥
- –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç—á—ë—Ç–æ–≤
- Graceful shutdown –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
"""

import asyncio
import logging
import signal
import sys
import os
from pathlib import Path
from typing import Optional

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from db.db import get_db, init_database
from utils.logging_conf import setup_logging, get_logger
from utils.time_utils import get_almaty_now
from utils.adapter import init_adapters
from handlers.events import events_router
from handlers.commands import commands_router, initialize_admin_ids, initialize_scheduler
from handlers.ui import ui_router
from handlers.flows import flows_router
from reports.scheduler import ReportScheduler

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logging()
logger = get_logger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
bot: Optional[Bot] = None
dp: Optional[Dispatcher] = None
scheduler: Optional[ReportScheduler] = None
web_app: Optional[web.Application] = None


async def create_bot() -> Bot:
    """–°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        logger.error("‚ùå BOT_TOKEN not found in environment variables")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    bot = Bot(
        token=bot_token,
        default=DefaultBotProperties(
            parse_mode=ParseMode.MARKDOWN
        )
    )
    
    logger.info(f"ü§ñ Bot created with token: {bot_token[:8]}...")
    return bot


async def setup_dispatcher() -> Dispatcher:
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å —Ä–æ—É—Ç–µ—Ä–∞–º–∏ –∏ middleware."""
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(ui_router)        # UI —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    dp.include_router(flows_router)     # FSM flows –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
    dp.include_router(events_router)    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —á–∞—Ç–∞
    dp.include_router(commands_router)  # –°—Ç–∞—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã (fallback)
    
    logger.info("üì° Dispatcher configured with routers")
    return dp


async def initialize_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await init_database()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        db = get_db()
        db.get_user_stats_summary()
        
        logger.info("üíæ Database initialized successfully")
        
    except Exception as e:
        logger.exception(f"‚ùå Failed to initialize database: {e}")
        sys.exit(1)


async def initialize_components(bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã."""
    global scheduler
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await initialize_database()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        init_adapters()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        initialize_admin_ids()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        initialize_scheduler(bot)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        from handlers.commands import get_scheduler
        scheduler = get_scheduler()
        if scheduler:
            await configure_scheduler_from_env(scheduler)
        
        logger.info("üöÄ All components initialized successfully")
        
    except Exception as e:
        logger.exception(f"‚ùå Failed to initialize components: {e}")
        sys.exit(1)


async def configure_scheduler_from_env(scheduler: ReportScheduler):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        report_time_str = os.getenv('REPORT_TIME', '23:59')
        target_chats_str = os.getenv('TARGET_CHATS', '')
        scheduler_enabled = os.getenv('SCHEDULER_ENABLED', 'true').lower() == 'true'
        report_types_str = os.getenv('REPORT_TYPES', 'daily')
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        try:
            from datetime import time as time_class
            hour, minute = map(int, report_time_str.split(':'))
            report_time = time_class(hour, minute)
        except ValueError:
            logger.warning(f"‚ö†Ô∏è Invalid REPORT_TIME format: {report_time_str}, using default 23:59")
            from datetime import time as time_class
            report_time = time_class(23, 59)
        
        # –ü–∞—Ä—Å–∏–º —á–∞—Ç—ã
        target_chats = []
        if target_chats_str:
            try:
                target_chats = [int(chat_id.strip()) for chat_id in target_chats_str.split(',') if chat_id.strip()]
            except ValueError:
                logger.warning(f"‚ö†Ô∏è Invalid TARGET_CHATS format: {target_chats_str}")
        
        # –ü–∞—Ä—Å–∏–º —Ç–∏–ø—ã –æ—Ç—á—ë—Ç–æ–≤
        report_types = [t.strip() for t in report_types_str.split(',') if t.strip()]
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        await scheduler.configure(
            report_time=report_time,
            target_chats=target_chats,
            enabled=scheduler_enabled,
            report_types=report_types
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω –∏ –µ—Å—Ç—å —á–∞—Ç—ã
        if scheduler_enabled and target_chats:
            await scheduler.start()
            logger.info(f"‚è∞ Scheduler started: {report_time}, {len(target_chats)} chats")
        else:
            logger.info("‚è∏Ô∏è Scheduler configured but not started (disabled or no target chats)")
        
    except Exception as e:
        logger.exception(f"‚ùå Failed to configure scheduler: {e}")


async def setup_webhook_mode(bot: Bot, dp: Dispatcher) -> web.Application:
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook —Ä–µ–∂–∏–º (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)."""
    webhook_url = os.getenv('WEBHOOK_URL')
    webhook_path = os.getenv('WEBHOOK_PATH', '/webhook')
    webhook_secret = os.getenv('WEBHOOK_SECRET')
    port = int(os.getenv('PORT', 8080))
    
    if not webhook_url:
        raise ValueError("WEBHOOK_URL is required for webhook mode")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
    await bot.set_webhook(
        url=f"{webhook_url}{webhook_path}",
        secret_token=webhook_secret,
        allowed_updates=dp.resolve_used_update_types()
    )
    
    # –°–æ–∑–¥–∞—ë–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
        secret_token=webhook_secret
    )
    webhook_requests_handler.register(app, path=webhook_path)
    
    # –î–æ–±–∞–≤–ª—è–µ–º health check endpoint
    async def health_check(request):
        return web.json_response({
            'status': 'ok',
            'timestamp': get_almaty_now().isoformat(),
            'bot_id': bot.id
        })
    
    app.router.add_get('/health', health_check)
    
    logger.info(f"üï∏Ô∏è Webhook configured: {webhook_url}{webhook_path}")
    return app


async def run_polling_mode(bot: Bot, dp: Dispatcher):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)."""
    try:
        # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        await bot.delete_webhook(drop_pending_updates=True)
        
        logger.info("üîÑ Starting bot in polling mode...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º allowed_updates –¥–ª—è chat_member —Å–æ–±—ã—Ç–∏–π
        allowed_updates = [
            "message", "callback_query", "inline_query", "chosen_inline_result",
            "chat_member", "my_chat_member"  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        ]
        await dp.start_polling(
            bot,
            allowed_updates=allowed_updates,
            drop_pending_updates=True
        )
        
    except Exception as e:
        logger.exception(f"‚ùå Error in polling mode: {e}")
        raise


async def run_webhook_mode(bot: Bot, dp: Dispatcher):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)."""
    global web_app
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
        web_app = await setup_webhook_mode(bot, dp)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        port = int(os.getenv('PORT', 8080))
        host = os.getenv('HOST', '0.0.0.0')
        
        logger.info(f"üï∏Ô∏è Starting bot in webhook mode on {host}:{port}...")
        
        runner = web.AppRunner(web_app)
        await runner.setup()
        
        site = web.TCPSite(runner, host, port)
        await site.start()
        
        logger.info(f"‚úÖ Webhook server started on {host}:{port}")
        
        # –ñ–¥—ë–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        stop_event = asyncio.Event()
        
        def signal_handler():
            logger.info("üì° Received shutdown signal")
            stop_event.set()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        if sys.platform != 'win32':
            for sig in (signal.SIGTERM, signal.SIGINT):
                asyncio.get_event_loop().add_signal_handler(sig, signal_handler)
        
        await stop_event.wait()
        
        # Graceful shutdown
        await runner.cleanup()
        
    except Exception as e:
        logger.exception(f"‚ùå Error in webhook mode: {e}")
        raise


async def shutdown_components():
    """Graceful shutdown –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
    global bot, scheduler, web_app
    
    logger.info("üõë Starting graceful shutdown...")
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if scheduler:
            await scheduler.stop()
            logger.info("‚è∞ Scheduler stopped")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if web_app:
            await web_app.cleanup()
            logger.info("üï∏Ô∏è Web application cleaned up")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        if bot:
            await bot.session.close()
            logger.info("ü§ñ Bot session closed")
        
        logger.info("‚úÖ Graceful shutdown completed")
        
    except Exception as e:
        logger.exception(f"‚ùå Error during shutdown: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    global bot, dp
    
    try:
        logger.info("üöÄ Starting Telegram Bot...")
        logger.info(f"üìÖ Start time: {get_almaty_now()}")
        
        # –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        bot = await create_bot()
        dp = await setup_dispatcher()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        await initialize_components(bot)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        logger.info(f"ü§ñ Bot started: @{bot_info.username} ({bot_info.first_name})")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        webhook_mode = os.getenv('WEBHOOK_MODE', 'false').lower() == 'true'
        
        if webhook_mode:
            await run_webhook_mode(bot, dp)
        else:
            await run_polling_mode(bot, dp)
            
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è Received keyboard interrupt")
    except Exception as e:
        logger.exception(f"‚ùå Critical error in main: {e}")
        sys.exit(1)
    finally:
        await shutdown_components()


if __name__ == '__main__':
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
        if sys.version_info < (3, 8):
            logger.error("‚ùå Python 3.8+ is required")
            sys.exit(1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        asyncio.run(main())
        
    except KeyboardInterrupt:
        logger.info("üëã Bot stopped by user")
    except Exception as e:
        logger.exception(f"‚ùå Fatal error: {e}")
        sys.exit(1)